"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js
  var require_base64_js = __commonJS({
    "node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js"(exports) {
      "use strict";
      init_dist();
      exports.byteLength = byteLength;
      exports.toByteArray = toByteArray;
      exports.fromByteArray = fromByteArray;
      var lookup = [];
      var revLookup = [];
      var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
      var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      for (i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      }
      var i;
      var len;
      revLookup["-".charCodeAt(0)] = 62;
      revLookup["_".charCodeAt(0)] = 63;
      function getLens(b64) {
        var len2 = b64.length;
        if (len2 % 4 > 0) {
          throw new Error("Invalid string. Length must be a multiple of 4");
        }
        var validLen = b64.indexOf("=");
        if (validLen === -1)
          validLen = len2;
        var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
        return [validLen, placeHoldersLen];
      }
      function byteLength(b64) {
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }
      function _byteLength(b64, validLen, placeHoldersLen) {
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }
      function toByteArray(b64) {
        var tmp;
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
        var curByte = 0;
        var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
        var i2;
        for (i2 = 0; i2 < len2; i2 += 4) {
          tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
          arr[curByte++] = tmp >> 16 & 255;
          arr[curByte++] = tmp >> 8 & 255;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 2) {
          tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 1) {
          tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
          arr[curByte++] = tmp >> 8 & 255;
          arr[curByte++] = tmp & 255;
        }
        return arr;
      }
      function tripletToBase64(num) {
        return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
      }
      function encodeChunk(uint8, start, end) {
        var tmp;
        var output = [];
        for (var i2 = start; i2 < end; i2 += 3) {
          tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
          output.push(tripletToBase64(tmp));
        }
        return output.join("");
      }
      function fromByteArray(uint8) {
        var tmp;
        var len2 = uint8.length;
        var extraBytes = len2 % 3;
        var parts = [];
        var maxChunkLength = 16383;
        for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
          parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
        }
        if (extraBytes === 1) {
          tmp = uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
          );
        } else if (extraBytes === 2) {
          tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
          );
        }
        return parts.join("");
      }
    }
  });

  // node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js
  var require_ieee754 = __commonJS({
    "node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js"(exports) {
      init_dist();
      exports.read = function(buffer, offset, isLE, mLen, nBytes) {
        var e, m;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var nBits = -7;
        var i = isLE ? nBytes - 1 : 0;
        var d = isLE ? -1 : 1;
        var s2 = buffer[offset + i];
        i += d;
        e = s2 & (1 << -nBits) - 1;
        s2 >>= -nBits;
        nBits += eLen;
        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {
        }
        m = e & (1 << -nBits) - 1;
        e >>= -nBits;
        nBits += mLen;
        for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {
        }
        if (e === 0) {
          e = 1 - eBias;
        } else if (e === eMax) {
          return m ? NaN : (s2 ? -1 : 1) * Infinity;
        } else {
          m = m + Math.pow(2, mLen);
          e = e - eBias;
        }
        return (s2 ? -1 : 1) * m * Math.pow(2, e - mLen);
      };
      exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
        var e, m, c;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
        var i = isLE ? 0 : nBytes - 1;
        var d = isLE ? 1 : -1;
        var s2 = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
        value = Math.abs(value);
        if (isNaN(value) || value === Infinity) {
          m = isNaN(value) ? 1 : 0;
          e = eMax;
        } else {
          e = Math.floor(Math.log(value) / Math.LN2);
          if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
          }
          if (e + eBias >= 1) {
            value += rt / c;
          } else {
            value += rt * Math.pow(2, 1 - eBias);
          }
          if (value * c >= 2) {
            e++;
            c /= 2;
          }
          if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
          } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
          } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
          }
        }
        for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {
        }
        e = e << mLen | m;
        eLen += mLen;
        for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {
        }
        buffer[offset + i - d] |= s2 * 128;
      };
    }
  });

  // node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js
  var require_buffer = __commonJS({
    "node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js"(exports) {
      "use strict";
      init_dist();
      var base64 = require_base64_js();
      var ieee754 = require_ieee754();
      var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
      exports.Buffer = Buffer2;
      exports.SlowBuffer = SlowBuffer;
      exports.INSPECT_MAX_BYTES = 50;
      var K_MAX_LENGTH = 2147483647;
      exports.kMaxLength = K_MAX_LENGTH;
      Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();
      if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
        console.error(
          "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
        );
      }
      function typedArraySupport() {
        try {
          const arr = new Uint8Array(1);
          const proto = { foo: function() {
            return 42;
          } };
          Object.setPrototypeOf(proto, Uint8Array.prototype);
          Object.setPrototypeOf(arr, proto);
          return arr.foo() === 42;
        } catch (e) {
          return false;
        }
      }
      Object.defineProperty(Buffer2.prototype, "parent", {
        enumerable: true,
        get: function() {
          if (!Buffer2.isBuffer(this))
            return void 0;
          return this.buffer;
        }
      });
      Object.defineProperty(Buffer2.prototype, "offset", {
        enumerable: true,
        get: function() {
          if (!Buffer2.isBuffer(this))
            return void 0;
          return this.byteOffset;
        }
      });
      function createBuffer(length) {
        if (length > K_MAX_LENGTH) {
          throw new RangeError('The value "' + length + '" is invalid for option "size"');
        }
        const buf = new Uint8Array(length);
        Object.setPrototypeOf(buf, Buffer2.prototype);
        return buf;
      }
      function Buffer2(arg, encodingOrOffset, length) {
        if (typeof arg === "number") {
          if (typeof encodingOrOffset === "string") {
            throw new TypeError(
              'The "string" argument must be of type string. Received type number'
            );
          }
          return allocUnsafe(arg);
        }
        return from(arg, encodingOrOffset, length);
      }
      Buffer2.poolSize = 8192;
      function from(value, encodingOrOffset, length) {
        if (typeof value === "string") {
          return fromString(value, encodingOrOffset);
        }
        if (ArrayBuffer.isView(value)) {
          return fromArrayView(value);
        }
        if (value == null) {
          throw new TypeError(
            "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
          );
        }
        if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof value === "number") {
          throw new TypeError(
            'The "value" argument must not be of type number. Received type number'
          );
        }
        const valueOf = value.valueOf && value.valueOf();
        if (valueOf != null && valueOf !== value) {
          return Buffer2.from(valueOf, encodingOrOffset, length);
        }
        const b = fromObject(value);
        if (b)
          return b;
        if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
          return Buffer2.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
        }
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
        );
      }
      Buffer2.from = function(value, encodingOrOffset, length) {
        return from(value, encodingOrOffset, length);
      };
      Object.setPrototypeOf(Buffer2.prototype, Uint8Array.prototype);
      Object.setPrototypeOf(Buffer2, Uint8Array);
      function assertSize(size) {
        if (typeof size !== "number") {
          throw new TypeError('"size" argument must be of type number');
        } else if (size < 0) {
          throw new RangeError('The value "' + size + '" is invalid for option "size"');
        }
      }
      function alloc(size, fill, encoding) {
        assertSize(size);
        if (size <= 0) {
          return createBuffer(size);
        }
        if (fill !== void 0) {
          return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
        }
        return createBuffer(size);
      }
      Buffer2.alloc = function(size, fill, encoding) {
        return alloc(size, fill, encoding);
      };
      function allocUnsafe(size) {
        assertSize(size);
        return createBuffer(size < 0 ? 0 : checked(size) | 0);
      }
      Buffer2.allocUnsafe = function(size) {
        return allocUnsafe(size);
      };
      Buffer2.allocUnsafeSlow = function(size) {
        return allocUnsafe(size);
      };
      function fromString(string, encoding) {
        if (typeof encoding !== "string" || encoding === "") {
          encoding = "utf8";
        }
        if (!Buffer2.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        const length = byteLength(string, encoding) | 0;
        let buf = createBuffer(length);
        const actual = buf.write(string, encoding);
        if (actual !== length) {
          buf = buf.slice(0, actual);
        }
        return buf;
      }
      function fromArrayLike(array) {
        const length = array.length < 0 ? 0 : checked(array.length) | 0;
        const buf = createBuffer(length);
        for (let i = 0; i < length; i += 1) {
          buf[i] = array[i] & 255;
        }
        return buf;
      }
      function fromArrayView(arrayView) {
        if (isInstance(arrayView, Uint8Array)) {
          const copy = new Uint8Array(arrayView);
          return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
        }
        return fromArrayLike(arrayView);
      }
      function fromArrayBuffer(array, byteOffset, length) {
        if (byteOffset < 0 || array.byteLength < byteOffset) {
          throw new RangeError('"offset" is outside of buffer bounds');
        }
        if (array.byteLength < byteOffset + (length || 0)) {
          throw new RangeError('"length" is outside of buffer bounds');
        }
        let buf;
        if (byteOffset === void 0 && length === void 0) {
          buf = new Uint8Array(array);
        } else if (length === void 0) {
          buf = new Uint8Array(array, byteOffset);
        } else {
          buf = new Uint8Array(array, byteOffset, length);
        }
        Object.setPrototypeOf(buf, Buffer2.prototype);
        return buf;
      }
      function fromObject(obj) {
        if (Buffer2.isBuffer(obj)) {
          const len = checked(obj.length) | 0;
          const buf = createBuffer(len);
          if (buf.length === 0) {
            return buf;
          }
          obj.copy(buf, 0, 0, len);
          return buf;
        }
        if (obj.length !== void 0) {
          if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
            return createBuffer(0);
          }
          return fromArrayLike(obj);
        }
        if (obj.type === "Buffer" && Array.isArray(obj.data)) {
          return fromArrayLike(obj.data);
        }
      }
      function checked(length) {
        if (length >= K_MAX_LENGTH) {
          throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
        }
        return length | 0;
      }
      function SlowBuffer(length) {
        if (+length != length) {
          length = 0;
        }
        return Buffer2.alloc(+length);
      }
      Buffer2.isBuffer = function isBuffer(b) {
        return b != null && b._isBuffer === true && b !== Buffer2.prototype;
      };
      Buffer2.compare = function compare(a, b) {
        if (isInstance(a, Uint8Array))
          a = Buffer2.from(a, a.offset, a.byteLength);
        if (isInstance(b, Uint8Array))
          b = Buffer2.from(b, b.offset, b.byteLength);
        if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {
          throw new TypeError(
            'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
          );
        }
        if (a === b)
          return 0;
        let x = a.length;
        let y = b.length;
        for (let i = 0, len = Math.min(x, y); i < len; ++i) {
          if (a[i] !== b[i]) {
            x = a[i];
            y = b[i];
            break;
          }
        }
        if (x < y)
          return -1;
        if (y < x)
          return 1;
        return 0;
      };
      Buffer2.isEncoding = function isEncoding(encoding) {
        switch (String(encoding).toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "latin1":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return true;
          default:
            return false;
        }
      };
      Buffer2.concat = function concat(list, length) {
        if (!Array.isArray(list)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }
        if (list.length === 0) {
          return Buffer2.alloc(0);
        }
        let i;
        if (length === void 0) {
          length = 0;
          for (i = 0; i < list.length; ++i) {
            length += list[i].length;
          }
        }
        const buffer = Buffer2.allocUnsafe(length);
        let pos = 0;
        for (i = 0; i < list.length; ++i) {
          let buf = list[i];
          if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) {
              if (!Buffer2.isBuffer(buf))
                buf = Buffer2.from(buf);
              buf.copy(buffer, pos);
            } else {
              Uint8Array.prototype.set.call(
                buffer,
                buf,
                pos
              );
            }
          } else if (!Buffer2.isBuffer(buf)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          } else {
            buf.copy(buffer, pos);
          }
          pos += buf.length;
        }
        return buffer;
      };
      function byteLength(string, encoding) {
        if (Buffer2.isBuffer(string)) {
          return string.length;
        }
        if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
          return string.byteLength;
        }
        if (typeof string !== "string") {
          throw new TypeError(
            'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string
          );
        }
        const len = string.length;
        const mustMatch = arguments.length > 2 && arguments[2] === true;
        if (!mustMatch && len === 0)
          return 0;
        let loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "ascii":
            case "latin1":
            case "binary":
              return len;
            case "utf8":
            case "utf-8":
              return utf8ToBytes(string).length;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return len * 2;
            case "hex":
              return len >>> 1;
            case "base64":
              return base64ToBytes(string).length;
            default:
              if (loweredCase) {
                return mustMatch ? -1 : utf8ToBytes(string).length;
              }
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer2.byteLength = byteLength;
      function slowToString(encoding, start, end) {
        let loweredCase = false;
        if (start === void 0 || start < 0) {
          start = 0;
        }
        if (start > this.length) {
          return "";
        }
        if (end === void 0 || end > this.length) {
          end = this.length;
        }
        if (end <= 0) {
          return "";
        }
        end >>>= 0;
        start >>>= 0;
        if (end <= start) {
          return "";
        }
        if (!encoding)
          encoding = "utf8";
        while (true) {
          switch (encoding) {
            case "hex":
              return hexSlice(this, start, end);
            case "utf8":
            case "utf-8":
              return utf8Slice(this, start, end);
            case "ascii":
              return asciiSlice(this, start, end);
            case "latin1":
            case "binary":
              return latin1Slice(this, start, end);
            case "base64":
              return base64Slice(this, start, end);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return utf16leSlice(this, start, end);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = (encoding + "").toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer2.prototype._isBuffer = true;
      function swap(b, n, m) {
        const i = b[n];
        b[n] = b[m];
        b[m] = i;
      }
      Buffer2.prototype.swap16 = function swap16() {
        const len = this.length;
        if (len % 2 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 16-bits");
        }
        for (let i = 0; i < len; i += 2) {
          swap(this, i, i + 1);
        }
        return this;
      };
      Buffer2.prototype.swap32 = function swap32() {
        const len = this.length;
        if (len % 4 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 32-bits");
        }
        for (let i = 0; i < len; i += 4) {
          swap(this, i, i + 3);
          swap(this, i + 1, i + 2);
        }
        return this;
      };
      Buffer2.prototype.swap64 = function swap64() {
        const len = this.length;
        if (len % 8 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 64-bits");
        }
        for (let i = 0; i < len; i += 8) {
          swap(this, i, i + 7);
          swap(this, i + 1, i + 6);
          swap(this, i + 2, i + 5);
          swap(this, i + 3, i + 4);
        }
        return this;
      };
      Buffer2.prototype.toString = function toString() {
        const length = this.length;
        if (length === 0)
          return "";
        if (arguments.length === 0)
          return utf8Slice(this, 0, length);
        return slowToString.apply(this, arguments);
      };
      Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;
      Buffer2.prototype.equals = function equals(b) {
        if (!Buffer2.isBuffer(b))
          throw new TypeError("Argument must be a Buffer");
        if (this === b)
          return true;
        return Buffer2.compare(this, b) === 0;
      };
      Buffer2.prototype.inspect = function inspect() {
        let str = "";
        const max = exports.INSPECT_MAX_BYTES;
        str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
        if (this.length > max)
          str += " ... ";
        return "<Buffer " + str + ">";
      };
      if (customInspectSymbol) {
        Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;
      }
      Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
        if (isInstance(target, Uint8Array)) {
          target = Buffer2.from(target, target.offset, target.byteLength);
        }
        if (!Buffer2.isBuffer(target)) {
          throw new TypeError(
            'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
          );
        }
        if (start === void 0) {
          start = 0;
        }
        if (end === void 0) {
          end = target ? target.length : 0;
        }
        if (thisStart === void 0) {
          thisStart = 0;
        }
        if (thisEnd === void 0) {
          thisEnd = this.length;
        }
        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
          throw new RangeError("out of range index");
        }
        if (thisStart >= thisEnd && start >= end) {
          return 0;
        }
        if (thisStart >= thisEnd) {
          return -1;
        }
        if (start >= end) {
          return 1;
        }
        start >>>= 0;
        end >>>= 0;
        thisStart >>>= 0;
        thisEnd >>>= 0;
        if (this === target)
          return 0;
        let x = thisEnd - thisStart;
        let y = end - start;
        const len = Math.min(x, y);
        const thisCopy = this.slice(thisStart, thisEnd);
        const targetCopy = target.slice(start, end);
        for (let i = 0; i < len; ++i) {
          if (thisCopy[i] !== targetCopy[i]) {
            x = thisCopy[i];
            y = targetCopy[i];
            break;
          }
        }
        if (x < y)
          return -1;
        if (y < x)
          return 1;
        return 0;
      };
      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
        if (buffer.length === 0)
          return -1;
        if (typeof byteOffset === "string") {
          encoding = byteOffset;
          byteOffset = 0;
        } else if (byteOffset > 2147483647) {
          byteOffset = 2147483647;
        } else if (byteOffset < -2147483648) {
          byteOffset = -2147483648;
        }
        byteOffset = +byteOffset;
        if (numberIsNaN(byteOffset)) {
          byteOffset = dir ? 0 : buffer.length - 1;
        }
        if (byteOffset < 0)
          byteOffset = buffer.length + byteOffset;
        if (byteOffset >= buffer.length) {
          if (dir)
            return -1;
          else
            byteOffset = buffer.length - 1;
        } else if (byteOffset < 0) {
          if (dir)
            byteOffset = 0;
          else
            return -1;
        }
        if (typeof val === "string") {
          val = Buffer2.from(val, encoding);
        }
        if (Buffer2.isBuffer(val)) {
          if (val.length === 0) {
            return -1;
          }
          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
        } else if (typeof val === "number") {
          val = val & 255;
          if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) {
              return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            } else {
              return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
            }
          }
          return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
        }
        throw new TypeError("val must be string, number or Buffer");
      }
      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
        let indexSize = 1;
        let arrLength = arr.length;
        let valLength = val.length;
        if (encoding !== void 0) {
          encoding = String(encoding).toLowerCase();
          if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) {
              return -1;
            }
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
          }
        }
        function read(buf, i2) {
          if (indexSize === 1) {
            return buf[i2];
          } else {
            return buf.readUInt16BE(i2 * indexSize);
          }
        }
        let i;
        if (dir) {
          let foundIndex = -1;
          for (i = byteOffset; i < arrLength; i++) {
            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
              if (foundIndex === -1)
                foundIndex = i;
              if (i - foundIndex + 1 === valLength)
                return foundIndex * indexSize;
            } else {
              if (foundIndex !== -1)
                i -= i - foundIndex;
              foundIndex = -1;
            }
          }
        } else {
          if (byteOffset + valLength > arrLength)
            byteOffset = arrLength - valLength;
          for (i = byteOffset; i >= 0; i--) {
            let found = true;
            for (let j = 0; j < valLength; j++) {
              if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
              }
            }
            if (found)
              return i;
          }
        }
        return -1;
      }
      Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {
        return this.indexOf(val, byteOffset, encoding) !== -1;
      };
      Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
      };
      Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
      };
      function hexWrite(buf, string, offset, length) {
        offset = Number(offset) || 0;
        const remaining = buf.length - offset;
        if (!length) {
          length = remaining;
        } else {
          length = Number(length);
          if (length > remaining) {
            length = remaining;
          }
        }
        const strLen = string.length;
        if (length > strLen / 2) {
          length = strLen / 2;
        }
        let i;
        for (i = 0; i < length; ++i) {
          const parsed = parseInt(string.substr(i * 2, 2), 16);
          if (numberIsNaN(parsed))
            return i;
          buf[offset + i] = parsed;
        }
        return i;
      }
      function utf8Write(buf, string, offset, length) {
        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
      }
      function asciiWrite(buf, string, offset, length) {
        return blitBuffer(asciiToBytes(string), buf, offset, length);
      }
      function base64Write(buf, string, offset, length) {
        return blitBuffer(base64ToBytes(string), buf, offset, length);
      }
      function ucs2Write(buf, string, offset, length) {
        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
      }
      Buffer2.prototype.write = function write(string, offset, length, encoding) {
        if (offset === void 0) {
          encoding = "utf8";
          length = this.length;
          offset = 0;
        } else if (length === void 0 && typeof offset === "string") {
          encoding = offset;
          length = this.length;
          offset = 0;
        } else if (isFinite(offset)) {
          offset = offset >>> 0;
          if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === void 0)
              encoding = "utf8";
          } else {
            encoding = length;
            length = void 0;
          }
        } else {
          throw new Error(
            "Buffer.write(string, encoding, offset[, length]) is no longer supported"
          );
        }
        const remaining = this.length - offset;
        if (length === void 0 || length > remaining)
          length = remaining;
        if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
          throw new RangeError("Attempt to write outside buffer bounds");
        }
        if (!encoding)
          encoding = "utf8";
        let loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "hex":
              return hexWrite(this, string, offset, length);
            case "utf8":
            case "utf-8":
              return utf8Write(this, string, offset, length);
            case "ascii":
            case "latin1":
            case "binary":
              return asciiWrite(this, string, offset, length);
            case "base64":
              return base64Write(this, string, offset, length);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return ucs2Write(this, string, offset, length);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      };
      Buffer2.prototype.toJSON = function toJSON() {
        return {
          type: "Buffer",
          data: Array.prototype.slice.call(this._arr || this, 0)
        };
      };
      function base64Slice(buf, start, end) {
        if (start === 0 && end === buf.length) {
          return base64.fromByteArray(buf);
        } else {
          return base64.fromByteArray(buf.slice(start, end));
        }
      }
      function utf8Slice(buf, start, end) {
        end = Math.min(buf.length, end);
        const res = [];
        let i = start;
        while (i < end) {
          const firstByte = buf[i];
          let codePoint = null;
          let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
          if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch (bytesPerSequence) {
              case 1:
                if (firstByte < 128) {
                  codePoint = firstByte;
                }
                break;
              case 2:
                secondByte = buf[i + 1];
                if ((secondByte & 192) === 128) {
                  tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                  if (tempCodePoint > 127) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 3:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                  if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 4:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                fourthByte = buf[i + 3];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                  if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                    codePoint = tempCodePoint;
                  }
                }
            }
          }
          if (codePoint === null) {
            codePoint = 65533;
            bytesPerSequence = 1;
          } else if (codePoint > 65535) {
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
          }
          res.push(codePoint);
          i += bytesPerSequence;
        }
        return decodeCodePointsArray(res);
      }
      var MAX_ARGUMENTS_LENGTH = 4096;
      function decodeCodePointsArray(codePoints) {
        const len = codePoints.length;
        if (len <= MAX_ARGUMENTS_LENGTH) {
          return String.fromCharCode.apply(String, codePoints);
        }
        let res = "";
        let i = 0;
        while (i < len) {
          res += String.fromCharCode.apply(
            String,
            codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
          );
        }
        return res;
      }
      function asciiSlice(buf, start, end) {
        let ret = "";
        end = Math.min(buf.length, end);
        for (let i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i] & 127);
        }
        return ret;
      }
      function latin1Slice(buf, start, end) {
        let ret = "";
        end = Math.min(buf.length, end);
        for (let i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i]);
        }
        return ret;
      }
      function hexSlice(buf, start, end) {
        const len = buf.length;
        if (!start || start < 0)
          start = 0;
        if (!end || end < 0 || end > len)
          end = len;
        let out = "";
        for (let i = start; i < end; ++i) {
          out += hexSliceLookupTable[buf[i]];
        }
        return out;
      }
      function utf16leSlice(buf, start, end) {
        const bytes = buf.slice(start, end);
        let res = "";
        for (let i = 0; i < bytes.length - 1; i += 2) {
          res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
        }
        return res;
      }
      Buffer2.prototype.slice = function slice(start, end) {
        const len = this.length;
        start = ~~start;
        end = end === void 0 ? len : ~~end;
        if (start < 0) {
          start += len;
          if (start < 0)
            start = 0;
        } else if (start > len) {
          start = len;
        }
        if (end < 0) {
          end += len;
          if (end < 0)
            end = 0;
        } else if (end > len) {
          end = len;
        }
        if (end < start)
          end = start;
        const newBuf = this.subarray(start, end);
        Object.setPrototypeOf(newBuf, Buffer2.prototype);
        return newBuf;
      };
      function checkOffset(offset, ext, length) {
        if (offset % 1 !== 0 || offset < 0)
          throw new RangeError("offset is not uint");
        if (offset + ext > length)
          throw new RangeError("Trying to access beyond buffer length");
      }
      Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let val = this[offset];
        let mul = 1;
        let i = 0;
        while (++i < byteLength2 && (mul *= 256)) {
          val += this[offset + i] * mul;
        }
        return val;
      };
      Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          checkOffset(offset, byteLength2, this.length);
        }
        let val = this[offset + --byteLength2];
        let mul = 1;
        while (byteLength2 > 0 && (mul *= 256)) {
          val += this[offset + --byteLength2] * mul;
        }
        return val;
      };
      Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 1, this.length);
        return this[offset];
      };
      Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        return this[offset] | this[offset + 1] << 8;
      };
      Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        return this[offset] << 8 | this[offset + 1];
      };
      Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
      };
      Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
      };
      Buffer2.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
        const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
        return BigInt(lo) + (BigInt(hi) << BigInt(32));
      });
      Buffer2.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
        const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
        return (BigInt(hi) << BigInt(32)) + BigInt(lo);
      });
      Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let val = this[offset];
        let mul = 1;
        let i = 0;
        while (++i < byteLength2 && (mul *= 256)) {
          val += this[offset + i] * mul;
        }
        mul *= 128;
        if (val >= mul)
          val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let i = byteLength2;
        let mul = 1;
        let val = this[offset + --i];
        while (i > 0 && (mul *= 256)) {
          val += this[offset + --i] * mul;
        }
        mul *= 128;
        if (val >= mul)
          val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 1, this.length);
        if (!(this[offset] & 128))
          return this[offset];
        return (255 - this[offset] + 1) * -1;
      };
      Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        const val = this[offset] | this[offset + 1] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        const val = this[offset + 1] | this[offset] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
      };
      Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
      };
      Buffer2.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);
        return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
      });
      Buffer2.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const val = (first << 24) + // Overflow
        this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
        return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);
      });
      Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, true, 23, 4);
      };
      Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, false, 23, 4);
      };
      Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, true, 52, 8);
      };
      Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, false, 52, 8);
      };
      function checkInt(buf, value, offset, ext, max, min) {
        if (!Buffer2.isBuffer(buf))
          throw new TypeError('"buffer" argument must be a Buffer instance');
        if (value > max || value < min)
          throw new RangeError('"value" argument is out of bounds');
        if (offset + ext > buf.length)
          throw new RangeError("Index out of range");
      }
      Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
          checkInt(this, value, offset, byteLength2, maxBytes, 0);
        }
        let mul = 1;
        let i = 0;
        this[offset] = value & 255;
        while (++i < byteLength2 && (mul *= 256)) {
          this[offset + i] = value / mul & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
          checkInt(this, value, offset, byteLength2, maxBytes, 0);
        }
        let i = byteLength2 - 1;
        let mul = 1;
        this[offset + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          this[offset + i] = value / mul & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 1, 255, 0);
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 65535, 0);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      };
      Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 65535, 0);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
        return offset + 2;
      };
      Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 4294967295, 0);
        this[offset + 3] = value >>> 24;
        this[offset + 2] = value >>> 16;
        this[offset + 1] = value >>> 8;
        this[offset] = value & 255;
        return offset + 4;
      };
      Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 4294967295, 0);
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
        return offset + 4;
      };
      function wrtBigUInt64LE(buf, value, offset, min, max) {
        checkIntBI(value, min, max, buf, offset, 7);
        let lo = Number(value & BigInt(4294967295));
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        let hi = Number(value >> BigInt(32) & BigInt(4294967295));
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        return offset;
      }
      function wrtBigUInt64BE(buf, value, offset, min, max) {
        checkIntBI(value, min, max, buf, offset, 7);
        let lo = Number(value & BigInt(4294967295));
        buf[offset + 7] = lo;
        lo = lo >> 8;
        buf[offset + 6] = lo;
        lo = lo >> 8;
        buf[offset + 5] = lo;
        lo = lo >> 8;
        buf[offset + 4] = lo;
        let hi = Number(value >> BigInt(32) & BigInt(4294967295));
        buf[offset + 3] = hi;
        hi = hi >> 8;
        buf[offset + 2] = hi;
        hi = hi >> 8;
        buf[offset + 1] = hi;
        hi = hi >> 8;
        buf[offset] = hi;
        return offset + 8;
      }
      Buffer2.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
        return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
      });
      Buffer2.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
        return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
      });
      Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset, byteLength2, limit - 1, -limit);
        }
        let i = 0;
        let mul = 1;
        let sub = 0;
        this[offset] = value & 255;
        while (++i < byteLength2 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset, byteLength2, limit - 1, -limit);
        }
        let i = byteLength2 - 1;
        let mul = 1;
        let sub = 0;
        this[offset + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 1, 127, -128);
        if (value < 0)
          value = 255 + value + 1;
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      };
      Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
        return offset + 2;
      };
      Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 2147483647, -2147483648);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        this[offset + 2] = value >>> 16;
        this[offset + 3] = value >>> 24;
        return offset + 4;
      };
      Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 2147483647, -2147483648);
        if (value < 0)
          value = 4294967295 + value + 1;
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
        return offset + 4;
      };
      Buffer2.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
        return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      Buffer2.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
        return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      function checkIEEE754(buf, value, offset, ext, max, min) {
        if (offset + ext > buf.length)
          throw new RangeError("Index out of range");
        if (offset < 0)
          throw new RangeError("Index out of range");
      }
      function writeFloat(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
        }
        ieee754.write(buf, value, offset, littleEndian, 23, 4);
        return offset + 4;
      }
      Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
        return writeFloat(this, value, offset, true, noAssert);
      };
      Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
        return writeFloat(this, value, offset, false, noAssert);
      };
      function writeDouble(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
        }
        ieee754.write(buf, value, offset, littleEndian, 52, 8);
        return offset + 8;
      }
      Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
        return writeDouble(this, value, offset, true, noAssert);
      };
      Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
        return writeDouble(this, value, offset, false, noAssert);
      };
      Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
        if (!Buffer2.isBuffer(target))
          throw new TypeError("argument should be a Buffer");
        if (!start)
          start = 0;
        if (!end && end !== 0)
          end = this.length;
        if (targetStart >= target.length)
          targetStart = target.length;
        if (!targetStart)
          targetStart = 0;
        if (end > 0 && end < start)
          end = start;
        if (end === start)
          return 0;
        if (target.length === 0 || this.length === 0)
          return 0;
        if (targetStart < 0) {
          throw new RangeError("targetStart out of bounds");
        }
        if (start < 0 || start >= this.length)
          throw new RangeError("Index out of range");
        if (end < 0)
          throw new RangeError("sourceEnd out of bounds");
        if (end > this.length)
          end = this.length;
        if (target.length - targetStart < end - start) {
          end = target.length - targetStart + start;
        }
        const len = end - start;
        if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
          this.copyWithin(targetStart, start, end);
        } else {
          Uint8Array.prototype.set.call(
            target,
            this.subarray(start, end),
            targetStart
          );
        }
        return len;
      };
      Buffer2.prototype.fill = function fill(val, start, end, encoding) {
        if (typeof val === "string") {
          if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
          } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
          }
          if (encoding !== void 0 && typeof encoding !== "string") {
            throw new TypeError("encoding must be a string");
          }
          if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
            throw new TypeError("Unknown encoding: " + encoding);
          }
          if (val.length === 1) {
            const code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") {
              val = code;
            }
          }
        } else if (typeof val === "number") {
          val = val & 255;
        } else if (typeof val === "boolean") {
          val = Number(val);
        }
        if (start < 0 || this.length < start || this.length < end) {
          throw new RangeError("Out of range index");
        }
        if (end <= start) {
          return this;
        }
        start = start >>> 0;
        end = end === void 0 ? this.length : end >>> 0;
        if (!val)
          val = 0;
        let i;
        if (typeof val === "number") {
          for (i = start; i < end; ++i) {
            this[i] = val;
          }
        } else {
          const bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);
          const len = bytes.length;
          if (len === 0) {
            throw new TypeError('The value "' + val + '" is invalid for argument "value"');
          }
          for (i = 0; i < end - start; ++i) {
            this[i + start] = bytes[i % len];
          }
        }
        return this;
      };
      var errors = {};
      function E(sym, getMessage, Base) {
        errors[sym] = class NodeError extends Base {
          constructor() {
            super();
            Object.defineProperty(this, "message", {
              value: getMessage.apply(this, arguments),
              writable: true,
              configurable: true
            });
            this.name = `${this.name} [${sym}]`;
            this.stack;
            delete this.name;
          }
          get code() {
            return sym;
          }
          set code(value) {
            Object.defineProperty(this, "code", {
              configurable: true,
              enumerable: true,
              value,
              writable: true
            });
          }
          toString() {
            return `${this.name} [${sym}]: ${this.message}`;
          }
        };
      }
      E(
        "ERR_BUFFER_OUT_OF_BOUNDS",
        function(name) {
          if (name) {
            return `${name} is outside of buffer bounds`;
          }
          return "Attempt to access memory outside buffer bounds";
        },
        RangeError
      );
      E(
        "ERR_INVALID_ARG_TYPE",
        function(name, actual) {
          return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
        },
        TypeError
      );
      E(
        "ERR_OUT_OF_RANGE",
        function(str, range, input) {
          let msg = `The value of "${str}" is out of range.`;
          let received = input;
          if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
            received = addNumericalSeparator(String(input));
          } else if (typeof input === "bigint") {
            received = String(input);
            if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
              received = addNumericalSeparator(received);
            }
            received += "n";
          }
          msg += ` It must be ${range}. Received ${received}`;
          return msg;
        },
        RangeError
      );
      function addNumericalSeparator(val) {
        let res = "";
        let i = val.length;
        const start = val[0] === "-" ? 1 : 0;
        for (; i >= start + 4; i -= 3) {
          res = `_${val.slice(i - 3, i)}${res}`;
        }
        return `${val.slice(0, i)}${res}`;
      }
      function checkBounds(buf, offset, byteLength2) {
        validateNumber(offset, "offset");
        if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {
          boundsError(offset, buf.length - (byteLength2 + 1));
        }
      }
      function checkIntBI(value, min, max, buf, offset, byteLength2) {
        if (value > max || value < min) {
          const n = typeof min === "bigint" ? "n" : "";
          let range;
          if (byteLength2 > 3) {
            if (min === 0 || min === BigInt(0)) {
              range = `>= 0${n} and < 2${n} ** ${(byteLength2 + 1) * 8}${n}`;
            } else {
              range = `>= -(2${n} ** ${(byteLength2 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n}`;
            }
          } else {
            range = `>= ${min}${n} and <= ${max}${n}`;
          }
          throw new errors.ERR_OUT_OF_RANGE("value", range, value);
        }
        checkBounds(buf, offset, byteLength2);
      }
      function validateNumber(value, name) {
        if (typeof value !== "number") {
          throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
        }
      }
      function boundsError(value, length, type) {
        if (Math.floor(value) !== value) {
          validateNumber(value, type);
          throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
        }
        if (length < 0) {
          throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
        }
        throw new errors.ERR_OUT_OF_RANGE(
          type || "offset",
          `>= ${type ? 1 : 0} and <= ${length}`,
          value
        );
      }
      var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
      function base64clean(str) {
        str = str.split("=")[0];
        str = str.trim().replace(INVALID_BASE64_RE, "");
        if (str.length < 2)
          return "";
        while (str.length % 4 !== 0) {
          str = str + "=";
        }
        return str;
      }
      function utf8ToBytes(string, units) {
        units = units || Infinity;
        let codePoint;
        const length = string.length;
        let leadSurrogate = null;
        const bytes = [];
        for (let i = 0; i < length; ++i) {
          codePoint = string.charCodeAt(i);
          if (codePoint > 55295 && codePoint < 57344) {
            if (!leadSurrogate) {
              if (codePoint > 56319) {
                if ((units -= 3) > -1)
                  bytes.push(239, 191, 189);
                continue;
              } else if (i + 1 === length) {
                if ((units -= 3) > -1)
                  bytes.push(239, 191, 189);
                continue;
              }
              leadSurrogate = codePoint;
              continue;
            }
            if (codePoint < 56320) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              leadSurrogate = codePoint;
              continue;
            }
            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
          } else if (leadSurrogate) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
          }
          leadSurrogate = null;
          if (codePoint < 128) {
            if ((units -= 1) < 0)
              break;
            bytes.push(codePoint);
          } else if (codePoint < 2048) {
            if ((units -= 2) < 0)
              break;
            bytes.push(
              codePoint >> 6 | 192,
              codePoint & 63 | 128
            );
          } else if (codePoint < 65536) {
            if ((units -= 3) < 0)
              break;
            bytes.push(
              codePoint >> 12 | 224,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else if (codePoint < 1114112) {
            if ((units -= 4) < 0)
              break;
            bytes.push(
              codePoint >> 18 | 240,
              codePoint >> 12 & 63 | 128,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else {
            throw new Error("Invalid code point");
          }
        }
        return bytes;
      }
      function asciiToBytes(str) {
        const byteArray = [];
        for (let i = 0; i < str.length; ++i) {
          byteArray.push(str.charCodeAt(i) & 255);
        }
        return byteArray;
      }
      function utf16leToBytes(str, units) {
        let c, hi, lo;
        const byteArray = [];
        for (let i = 0; i < str.length; ++i) {
          if ((units -= 2) < 0)
            break;
          c = str.charCodeAt(i);
          hi = c >> 8;
          lo = c % 256;
          byteArray.push(lo);
          byteArray.push(hi);
        }
        return byteArray;
      }
      function base64ToBytes(str) {
        return base64.toByteArray(base64clean(str));
      }
      function blitBuffer(src, dst, offset, length) {
        let i;
        for (i = 0; i < length; ++i) {
          if (i + offset >= dst.length || i >= src.length)
            break;
          dst[i + offset] = src[i];
        }
        return i;
      }
      function isInstance(obj, type) {
        return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
      }
      function numberIsNaN(obj) {
        return obj !== obj;
      }
      var hexSliceLookupTable = function() {
        const alphabet = "0123456789abcdef";
        const table = new Array(256);
        for (let i = 0; i < 16; ++i) {
          const i16 = i * 16;
          for (let j = 0; j < 16; ++j) {
            table[i16 + j] = alphabet[i] + alphabet[j];
          }
        }
        return table;
      }();
      function defineBigIntMethod(fn) {
        return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
      }
      function BufferBigIntNotDefined() {
        throw new Error("BigInt not supported");
      }
    }
  });

  // node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js
  var require_browser = __commonJS({
    "node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js"(exports, module) {
      init_dist();
      var process = module.exports = {};
      var cachedSetTimeout;
      var cachedClearTimeout;
      function defaultSetTimout() {
        throw new Error("setTimeout has not been defined");
      }
      function defaultClearTimeout() {
        throw new Error("clearTimeout has not been defined");
      }
      (function() {
        try {
          if (typeof setTimeout === "function") {
            cachedSetTimeout = setTimeout;
          } else {
            cachedSetTimeout = defaultSetTimout;
          }
        } catch (e) {
          cachedSetTimeout = defaultSetTimout;
        }
        try {
          if (typeof clearTimeout === "function") {
            cachedClearTimeout = clearTimeout;
          } else {
            cachedClearTimeout = defaultClearTimeout;
          }
        } catch (e) {
          cachedClearTimeout = defaultClearTimeout;
        }
      })();
      function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
          return setTimeout(fun, 0);
        }
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
        }
        try {
          return cachedSetTimeout(fun, 0);
        } catch (e) {
          try {
            return cachedSetTimeout.call(null, fun, 0);
          } catch (e2) {
            return cachedSetTimeout.call(this, fun, 0);
          }
        }
      }
      function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
          return clearTimeout(marker);
        }
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
        }
        try {
          return cachedClearTimeout(marker);
        } catch (e) {
          try {
            return cachedClearTimeout.call(null, marker);
          } catch (e2) {
            return cachedClearTimeout.call(this, marker);
          }
        }
      }
      var queue = [];
      var draining = false;
      var currentQueue;
      var queueIndex = -1;
      function cleanUpNextTick() {
        if (!draining || !currentQueue) {
          return;
        }
        draining = false;
        if (currentQueue.length) {
          queue = currentQueue.concat(queue);
        } else {
          queueIndex = -1;
        }
        if (queue.length) {
          drainQueue();
        }
      }
      function drainQueue() {
        if (draining) {
          return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;
        var len = queue.length;
        while (len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
            if (currentQueue) {
              currentQueue[queueIndex].run();
            }
          }
          queueIndex = -1;
          len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
      }
      process.nextTick = function(fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
          }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
        }
      };
      function Item(fun, array) {
        this.fun = fun;
        this.array = array;
      }
      Item.prototype.run = function() {
        this.fun.apply(null, this.array);
      };
      process.title = "browser";
      process.browser = true;
      process.env = {};
      process.argv = [];
      process.version = "";
      process.versions = {};
      function noop() {
      }
      process.on = noop;
      process.addListener = noop;
      process.once = noop;
      process.off = noop;
      process.removeListener = noop;
      process.removeAllListeners = noop;
      process.emit = noop;
      process.prependListener = noop;
      process.prependOnceListener = noop;
      process.listeners = function(name) {
        return [];
      };
      process.binding = function(name) {
        throw new Error("process.binding is not supported");
      };
      process.cwd = function() {
        return "/";
      };
      process.chdir = function(dir) {
        throw new Error("process.chdir is not supported");
      };
      process.umask = function() {
        return 0;
      };
    }
  });

  // shims/dist/index.js
  var import_buffer_polyfill, import_process_polyfill, o;
  var init_dist = __esm({
    "shims/dist/index.js"() {
      "use strict";
      import_buffer_polyfill = __toESM(require_buffer(), 1);
      import_process_polyfill = __toESM(require_browser(), 1);
      o = globalThis || void 0 || self;
    }
  });

  // shims/banner/index.cjs
  var require_banner = __commonJS({
    "shims/banner/index.cjs"() {
      init_dist();
      globalThis.Buffer = globalThis.Buffer || import_buffer_polyfill.Buffer;
      globalThis.global = globalThis.global || o;
      globalThis.process = globalThis.process || import_process_polyfill.default;
    }
  });
  require_banner();
})();
/*! Bundled license information:

ieee754/index.js:
  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)

buffer/index.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)
*/

import {
  __toESM,
  require_dist
} from "./chunk-CGMQ33UU.js";

// node_modules/@commercetools/platform-sdk/dist/commercetools-platform-sdk.browser.esm.js
var import_dist = __toESM(require_dist());
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function isDefined(value) {
  return typeof value !== "undefined" && value !== null;
}
function stringify(object) {
  const params = new URLSearchParams(object);
  for (const [key, value] of Object.entries(object)) {
    if (Array.isArray(value)) {
      params.delete(key);
      value.filter(Boolean).forEach((v) => params.append(key, v));
    }
  }
  return params.toString();
}
function cleanObject(obj) {
  return Object.keys(obj).reduce((result, key) => {
    const value = obj[key];
    if (Array.isArray(value)) {
      const values = value.filter(isDefined);
      if (!values.length) {
        return result;
      }
      return {
        ...result,
        [key]: values
      };
    }
    if (isDefined(value)) {
      return {
        ...result,
        [key]: value
      };
    }
    return result;
  }, {});
}
function formatQueryString(variableMap) {
  const map = cleanObject(variableMap);
  const result = stringify(map);
  if (result === "") {
    return "";
  }
  return `?${result}`;
}
function buildRelativeUri(commonRequest) {
  const pathMap = commonRequest.pathVariables;
  var uri = commonRequest.uriTemplate;
  for (const param in pathMap) {
    uri = uri.replace(`{${param}}`, `${pathMap[param]}`);
  }
  const resQuery = formatQueryString(commonRequest.queryParams || {});
  return `${uri}${resQuery}`;
}
var ApiRequest = class {
  constructor(request, requestExecutor) {
    this.requestExecutor = requestExecutor;
    _defineProperty(this, "request", void 0);
    this.request = {
      ...request,
      uri: buildRelativeUri(request)
    };
  }
  clientRequest() {
    return this.request;
  }
  execute() {
    return this.requestExecutor(this.request);
  }
};
var ByProjectKeyApiClientsByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/api-clients/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      }
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/api-clients/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      }
    }, this.args.executeRequest);
  }
};
var ByProjectKeyApiClientsRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withId(childPathArgs) {
    return new ByProjectKeyApiClientsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/api-clients",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/api-clients",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyAsAssociateByAssociateIdBusinessUnitsByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/as-associate/{associateId}/business-units/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/as-associate/{associateId}/business-units/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyAsAssociateByAssociateIdBusinessUnitsKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/as-associate/{associateId}/business-units/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/as-associate/{associateId}/business-units/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyAsAssociateByAssociateIdBusinessUnitsRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyAsAssociateByAssociateIdBusinessUnitsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyAsAssociateByAssociateIdBusinessUnitsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/as-associate/{associateId}/business-units",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/as-associate/{associateId}/business-units",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsReplicateRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Creates a new Cart by replicating an existing Cart or Order. Can be useful in cases where a customer wants to cancel a recent order to make some changes or reorder a previous order.
   *
   *	The replicated Cart preserves Customer information, Line Items and Custom Line Items, Custom Fields, Discount Codes, and other settings of the Cart or Order. If the Line Items become invalid, for example, due to removed Products or Prices, they are removed from the new Cart. If the Customer switches to another Customer Group, the new Cart is updated with the new value. It has up-to-date Tax Rates, Prices, and Line Item product data and is in `Active` [CartState](ctp:api:type:CartState).
   *
   *	The new Cart does not contain Payments or Deliveries. The [State](ctp:api:type:ItemState) of Line Items and Custom Line Items is reset to `initial`.
   *
   *	If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/replicate",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  /**
   *	If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  /**
   *	If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  replicate() {
    return new ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsReplicateRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creates a [Cart](ctp:api:type:Cart) in the [BusinessUnit](ctp:api:type:BusinessUnit) referenced by `businessUnitKey`. As such, the `businessUnit` field on [CartDraft](ctp:api:type:CartDraft) is ignored for this request.
   *	Creating a Cart can fail with an [InvalidOperation](ctp:api:type:InvalidOperationError) if the referenced [ShippingMethod](ctp:api:type:ShippingMethod) in the [CartDraft](ctp:api:type:CartDraft) has a predicate that does not match the Cart.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyOrdersQuotesRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Creates an Order from a [Quote](ctp:api:type:Cart) in a [BusinessUnit](ctp:api:type:BusinessUnit).
   *	Creating an Order fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) if the Quote does not reference the same BusinessUnit as the `businessUnitKey` path parameter.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders/quotes",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyOrdersByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	If the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	If the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyOrdersOrderNumberByOrderNumberRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	If the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders/order-number={orderNumber}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	If the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders/order-number={orderNumber}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyOrdersRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  orderQuote() {
    return new ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyOrdersQuotesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withOrderNumber(childPathArgs) {
    return new ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyOrdersOrderNumberByOrderNumberRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyOrdersByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creates an Order from a [Cart](ctp:api:type:Cart) in a [BusinessUnit](ctp:api:type:BusinessUnit).
   *	The Cart must have a shipping address set before creating an Order.
   *	Creating an Order fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) if the Cart does not reference the same BusinessUnit as the `businessUnitKey` path parameter.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuoteRequestsByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	If the QuoteRequest exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	If the QuoteRequest exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuoteRequestsKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	If the QuoteRequest exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	If the QuoteRequest exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuoteRequestsRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuoteRequestsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuoteRequestsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creates a QuoteRequest in a [BusinessUnit](ctp:api:type:BusinessUnit). Creating QuoteRequest fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) if the Cart does not reference the same BusinessUnit as the `businessUnitKey` path parameter.
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuotesByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	If the Quote exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quotes/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	If the Quote exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quotes/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuotesKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	If the Quote exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quotes/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	If the Quote exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quotes/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuotesRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuotesKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuotesByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quotes",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	A shopping cart holds product variants and can be ordered.
   */
  carts() {
    return new ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  orders() {
    return new ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyOrdersRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	A quote holds the negotiated offer.
   */
  quotes() {
    return new ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuotesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  quoteRequests() {
    return new ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuoteRequestsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
};
var ByProjectKeyAsAssociateByAssociateIdRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	A Business Unit can represent a Company or a Division.
   */
  businessUnits() {
    return new ByProjectKeyAsAssociateByAssociateIdBusinessUnitsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  inBusinessUnitKeyWithBusinessUnitKeyValue(childPathArgs) {
    return new ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
};
var ByProjectKeyAsAssociateRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withAssociateIdValue(childPathArgs) {
    return new ByProjectKeyAsAssociateByAssociateIdRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
};
var ByProjectKeyAssociateRolesByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/associate-roles/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/associate-roles/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/associate-roles/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyAssociateRolesKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/associate-roles/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/associate-roles/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  /**
   *	Deleting an AssociateRole generates the [AssociateRoleDeleted](ctp:api:type:AssociateRoleDeletedMessage) Message. An AssociateRole can only be deleted if it is not assigned to any [Associates](ctp:api:type:Associate).
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/associate-roles/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyAssociateRolesRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyAssociateRolesKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyAssociateRolesByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/associate-roles",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creating a Associate Role generates the [AssociateRoleCreated](ctp:api:type:AssociateRoleCreatedMessage) Message.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/associate-roles",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyAttributeGroupsByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/attribute-groups/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/attribute-groups/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/attribute-groups/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyAttributeGroupsKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/attribute-groups/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/attribute-groups/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/attribute-groups/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyAttributeGroupsRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyAttributeGroupsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyAttributeGroupsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/attribute-groups",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/attribute-groups",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyBusinessUnitsByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/business-units/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/business-units/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/business-units/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyBusinessUnitsKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/business-units/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/business-units/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/business-units/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyBusinessUnitsRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyBusinessUnitsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyBusinessUnitsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/business-units",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/business-units",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyCartDiscountsByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/cart-discounts/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/cart-discounts/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/cart-discounts/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyCartDiscountsKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/cart-discounts/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/cart-discounts/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/cart-discounts/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyCartDiscountsRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyCartDiscountsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyCartDiscountsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/cart-discounts",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/cart-discounts",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyCartsReplicateRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Creates a new Cart by replicating an existing Cart or Order. Can be useful in cases where a customer wants to cancel a recent order to make some changes or reorder a previous order.
   *
   *	The replicated Cart preserves Customer information, Line Items and Custom Line Items, Custom Fields, Discount Codes, and other settings of the Cart or Order. If the Line Items become invalid, for example, due to removed Products or Prices, they are removed from the new Cart. If the Customer switches to another Customer Group, the new Cart is updated with the new value. It has up-to-date Tax Rates, Prices, and Line Item product data and is in `Active` [CartState](ctp:api:type:CartState).
   *
   *	The new Cart does not contain Payments or Deliveries. The [State](ctp:api:type:ItemState) of Line Items and Custom Line Items is reset to `initial`.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/carts/replicate",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyCartsByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	To ensure the Cart is up-to-date with current values (such as Prices and Discounts), use the [Recalculate](ctp:api:type:CartRecalculateAction) update action.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/carts/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/carts/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/carts/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyCartsCustomerIdByCustomerIdRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves the recently modified active Cart of a Customer with [CartOrigin](ctp:api:type:CartOrigin) `Customer`. If no active Cart exists, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   *	To ensure the Cart is up-to-date with current values (such as Prices and Discounts), use the [Recalculate](ctp:api:type:CartRecalculateAction) update action.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/carts/customer-id={customerId}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyCartsKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	To ensure the Cart is up-to-date with current values (such as Prices and Discounts), use the [Recalculate](ctp:api:type:CartRecalculateAction) update action.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/carts/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/carts/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/carts/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyCartsRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  replicate() {
    return new ByProjectKeyCartsReplicateRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withCustomerId(childPathArgs) {
    return new ByProjectKeyCartsCustomerIdByCustomerIdRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withKey(childPathArgs) {
    return new ByProjectKeyCartsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyCartsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/carts",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the
   *	[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft
   *	has a `predicate` that does not match the Cart.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/carts",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyCategoriesByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Either the [scope](/../api/scopes) `view_products:{projectKey}` or `view_categories:{projectKey}` is required.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/categories/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/categories/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  /**
   *	Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/categories/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyCategoriesKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Either the [scope](/../api/scopes) `view_products:{projectKey}` or `view_categories:{projectKey}` is required.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/categories/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/categories/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  /**
   *	Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/categories/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyCategoriesRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyCategoriesKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyCategoriesByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Either the [scope](/../api/scopes) `view_products:{projectKey}` or `view_categories:{projectKey}` is required.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/categories",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.
   *
   *	Creating a Category produces the [CategoryCreated](ctp:api:type:CategoryCreatedMessage) Message.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/categories",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyChannelsByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/channels/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/channels/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/channels/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyChannelsRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withId(childPathArgs) {
    return new ByProjectKeyChannelsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/channels",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/channels",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyCustomObjectsByContainerByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/custom-objects/{container}/{key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/custom-objects/{container}/{key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyCustomObjectsByContainerRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/custom-objects/{container}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyCustomObjectsRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withContainerAndKey(childPathArgs) {
    return new ByProjectKeyCustomObjectsByContainerByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withContainer(childPathArgs) {
    return new ByProjectKeyCustomObjectsByContainerRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	For performance reasons, it is highly advisable to query for Custom Objects in a container by using the `container` field in the `where` predicate.
   *
   */
  /**
   * @deprecated
   **/
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/custom-objects",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	If an object with the given container/key exists, the object will be replaced with the new value and the version is incremented.
   *	If the request contains a version and an object with the given container/key, then the version must match the version of the existing object. Concurrent updates to the same Custom Object returns a [ConcurrentModification](ctp:api:type:ConcurrentModificationError) error even if the version is not provided.
   *
   *	Fields with `null` values will **not be saved**.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/custom-objects",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyCustomerGroupsByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/customer-groups/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/customer-groups/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/customer-groups/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyCustomerGroupsKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/customer-groups/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/customer-groups/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/customer-groups/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyCustomerGroupsRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyCustomerGroupsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyCustomerGroupsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/customer-groups",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/customer-groups",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyCustomersEmailConfirmRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Verifying the email of the Customer produces the [CustomerEmailVerified](ctp:api:type:CustomerEmailVerifiedMessage) Message.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/customers/email/confirm",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyCustomersEmailTokenRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/customers/email-token",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyCustomersPasswordTokenRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/customers/password-token",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyCustomersPasswordRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Changing the password produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=false`.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/customers/password",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyCustomersPasswordResetRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Resetting the password of the Customer produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=true`.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/customers/password/reset",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyCustomersByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/customers/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/customers/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  /**
   *	Deleting a Customer produces the [CustomerDeleted](ctp:api:type:CustomerDeletedMessage) Message.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/customers/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyCustomersEmailTokenByEmailTokenRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/customers/email-token={emailToken}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyCustomersKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/customers/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/customers/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  /**
   *	Deleting a Customer produces the [CustomerDeleted](ctp:api:type:CustomerDeletedMessage) Message.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/customers/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyCustomersPasswordTokenByPasswordTokenRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/customers/password-token={passwordToken}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyCustomersRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withPasswordToken(childPathArgs) {
    return new ByProjectKeyCustomersPasswordTokenByPasswordTokenRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withEmailToken(childPathArgs) {
    return new ByProjectKeyCustomersEmailTokenByEmailTokenRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  emailToken() {
    return new ByProjectKeyCustomersEmailTokenRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  emailConfirm() {
    return new ByProjectKeyCustomersEmailConfirmRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  password() {
    return new ByProjectKeyCustomersPasswordRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  passwordReset() {
    return new ByProjectKeyCustomersPasswordResetRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  passwordToken() {
    return new ByProjectKeyCustomersPasswordTokenRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withKey(childPathArgs) {
    return new ByProjectKeyCustomersKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyCustomersByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/customers",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	If the `anonymousCart` field is set on the [CustomerDraft](ctp:api:type:CustomerDraft), then the newly created Customer will be assigned to that [Cart](ctp:api:type:Cart).
   *	Similarly, if the `anonymousId` field is set, the Customer will be set on all [Carts](ctp:api:type:Cart), [Orders](ctp:api:type:Order), [ShoppingLists](ctp:api:type:ShoppingList) and [Payments](ctp:api:type:Payment) with the same `anonymousId`.
   *	Creating a Customer produces the [CustomerCreated](ctp:api:type:CustomerCreatedMessage) Message.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/customers",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyDiscountCodesByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Deprecated scope: `view_orders:{projectKey}`
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/discount-codes/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Deprecated scope: `manage_orders:{projectKey}`
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/discount-codes/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  /**
   *	Deprecated scope: `manage_orders:{projectKey}`
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/discount-codes/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyDiscountCodesRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withId(childPathArgs) {
    return new ByProjectKeyDiscountCodesByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Deprecated scope: `view_orders:{projectKey}`
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/discount-codes",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Deprecated scope: `manage_orders:{projectKey}`
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/discount-codes",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyExtensionsByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/extensions/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/extensions/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/extensions/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyExtensionsKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/extensions/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/extensions/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/extensions/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyExtensionsRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyExtensionsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyExtensionsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/extensions",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/extensions",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyGraphqlRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Execute a GraphQL query
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/graphql",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/graphql",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyMeCustomersRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	The My Business Unit endpoint does not support assigning existing Customers to a Business Unit.
   *	Associates with the `UpdateAssociates` [Permission](ctp:api:type:Permission) can use this endpoint to create a new Customer and associate it with the Business Unit.
   *	If the required [Permission](/projects/associate-roles#permission) is missing, an [AssociateMissingPermission](/errors#associatemissingpermission) error is returned.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/in-business-unit/key={businessUnitKey}/me/customers",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyMeRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  customers() {
    return new ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyMeCustomersRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
};
var ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  me() {
    return new ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyMeRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
};
var ByProjectKeyInStoreKeyByStoreKeyCartDiscountsByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/cart-discounts/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	To update a CartDiscount, you must have permissions for all Stores the CartDiscount is associated with, except when [removing a Store](ctp:api:type:CartDiscountRemoveStoreAction).
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/cart-discounts/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  /**
   *	To delete a CartDiscount, specify the `manage_cart_discounts:{projectKey}:{storeKey}` scope for all Stores associated with the CartDiscount.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/cart-discounts/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyCartDiscountsKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/cart-discounts/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	To update a CartDiscount, you must have permissions for all Stores the CartDiscount is associated with, except when [removing a Store](ctp:api:type:CartDiscountRemoveStoreAction).
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/cart-discounts/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  /**
   *	To delete a CartDiscount, specify the `manage_cart_discounts:{projectKey}:{storeKey}` scope for all Stores associated with the CartDiscount.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/cart-discounts/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyCartDiscountsRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyCartDiscountsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyCartDiscountsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/cart-discounts",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	When using the endpoint, the Store specified in the path and the Stores specified in the payload's `stores` field are added to the CartDiscount.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/cart-discounts",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyCartsReplicateRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Creates a new Cart by replicating an existing Cart or Order. Can be useful in cases where a customer wants to cancel a recent order to make some changes or reorder a previous order.
   *
   *	The replicated Cart preserves Customer information, Line Items and Custom Line Items, Custom Fields, Discount Codes, and other settings of the Cart or Order. If the Line Items become invalid, for example, due to removed Products or Prices, they are removed from the new Cart. If the Customer switches to another Customer Group, the new Cart is updated with the new value. It has up-to-date Tax Rates, Prices, and Line Item product data and is in `Active` [CartState](ctp:api:type:CartState).
   *
   *	The new Cart does not contain payments or deliveries. The [State](ctp:api:type:ItemState) of Line Items and Custom Line Items is reset to `initial`.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/carts/replicate",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyCartsByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	If the Cart exists in the Project but does not have the `store` field, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   *	To ensure the Cart is up-to-date with current values (such as Prices and Discounts), use the [Recalculate](ctp:api:type:CartRecalculateAction) update action.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/carts/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Updates a [Cart](ctp:api:type:Cart) in the [Store](ctp:api:type:Store) specified by `storeKey`.
   *	If the Cart exists in the Project but does not have the `store` field, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/carts/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  /**
   *	If the Cart exists in the Project but does not have the `store` field, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/carts/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyCartsCustomerIdByCustomerIdRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves the recently modified active Cart of a Customer with [CartOrigin](ctp:api:type:CartOrigin) `Customer`. If no active Cart exists, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   *	If the Cart exists in the Project but does not have the `store` field, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   *	To ensure the Cart is up-to-date with current values (such as Prices and Discounts), use the [Recalculate](ctp:api:type:CartRecalculateAction) update action.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/carts/customer-id={customerId}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyCartsKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	If the Cart exists in the Project but does not have the `store` field, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   *	To ensure the Cart is up-to-date with current values (such as Prices and Discounts), use the [Recalculate](ctp:api:type:CartRecalculateAction) update action.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/carts/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	If the Cart exists in the Project but does not have the `store` field, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/carts/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  /**
   *	If the Cart exists in the Project but does not have the `store` field, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/carts/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyCartsRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withCustomerId(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyCartsCustomerIdByCustomerIdRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withKey(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyCartsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  replicate() {
    return new ByProjectKeyInStoreKeyByStoreKeyCartsReplicateRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyCartsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Queries carts in a specific [Store](ctp:api:type:Store).
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/carts",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creates a [Cart](ctp:api:type:Cart) in the [Store](ctp:api:type:Store) specified by `storeKey`.
   *	When using this endpoint the Cart's `store` field is always set to the [Store](ctp:api:type:Store) specified in the path parameter.
   *	If the referenced [ShippingMethod](ctp:api:type:ShippingMethod) in the [CartDraft](ctp:api:type:CartDraft) has a predicate that does not match, an [InvalidOperation](ctp:api:type:InvalidOperationError) error is returned.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/carts",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyCustomersEmailConfirmRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	The customer verifies the email using the token value.
   *	Verifying the email of the Customer produces the [CustomerEmailVerified](ctp:api:type:CustomerEmailVerifiedMessage) Message.
   *
   *	If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/customers/email/confirm",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyCustomersEmailTokenRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/customers/email-token",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordTokenRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/customers/password-token",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Changing the password of the Customer produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=false`.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/customers/password",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordResetRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Resetting the password of the Customer produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=true`.
   *
   *	If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/customers/password/reset",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyCustomersByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/customers/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/customers/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  /**
   *	Deleting a Customer produces the [CustomerDeleted](ctp:api:type:CustomerDeletedMessage) Message.
   *
   *	If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/customers/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyCustomersEmailTokenByEmailTokenRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/customers/email-token={emailToken}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyCustomersKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/customers/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/customers/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  /**
   *	Deleting a Customer produces the [CustomerDeleted](ctp:api:type:CustomerDeletedMessage) Message.
   *
   *	If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/customers/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordTokenByPasswordTokenRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/customers/password-token={passwordToken}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyCustomersRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withPasswordToken(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordTokenByPasswordTokenRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withEmailToken(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyCustomersEmailTokenByEmailTokenRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  emailToken() {
    return new ByProjectKeyInStoreKeyByStoreKeyCustomersEmailTokenRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  emailConfirm() {
    return new ByProjectKeyInStoreKeyByStoreKeyCustomersEmailConfirmRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  password() {
    return new ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  passwordReset() {
    return new ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordResetRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  passwordToken() {
    return new ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordTokenRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withKey(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyCustomersKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyCustomersByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/customers",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	When using this endpoint, if omitted, the Customer `stores` field is set to the [Store](ctp:api:type:Store) specified in the path parameter.
   *
   *	If the `anonymousCart` field is set on the [CustomerDraft](ctp:api:type:CustomerDraft), then the newly created Customer will be assigned to that [Cart](ctp:api:type:Cart).
   *	Similarly, if the `anonymousId` field is set, the Customer will be set on all [Carts](ctp:api:type:Cart), [Orders](ctp:api:type:Order), [ShoppingLists](ctp:api:type:ShoppingList) and [Payments](ctp:api:type:Payment) with the same `anonymousId`.
   *	If a Cart with a `store` field specified, the `store` field must reference the same [Store](ctp:api:type:Store) specified in the `{storeKey}` path parameter.
   *	Creating a Customer produces the [CustomerCreated](ctp:api:type:CustomerCreatedMessage) Message.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/customers",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyLoginRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Authenticates a Customer associated with a [Store](ctp:api:type:Store). For more information, see [Global versus Store-specific Customers](/../api/customers-overview#global-versus-store-specific-customers).
   *
   *	If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns an [InvalidCredentials](ctp:api:type:InvalidCredentialsError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/login",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyMeActiveCartRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves the Customer's most recently modified active Cart in the Store specified by the `storeKey` path parameter.
   *
   *	Carts with `Merchant` or `Quote` [CartOrigin](ctp:api:type:CartOrigin) are ignored.
   *
   *	If no active Cart exists, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/me/active-cart",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyMeCartsByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/me/carts/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	If the Cart exists in the Project but does not have the `store` field, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/me/carts/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/me/carts/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyMeCartsRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withId(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyMeCartsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/me/carts",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	The `store` field in the created [Cart](ctp:api:type:Cart) is set to the Store specified by the `storeKey` path parameter.
   *
   *	Specific Error Codes: [CountryNotConfiguredInStore](ctp:api:type:CountryNotConfiguredInStoreError)
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/me/carts",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyMeEmailConfirmRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	This is the last step in the [email verification process of a Customer](/../api/projects/customers#email-verification-of-customer-in-store).
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/me/email/confirm",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyMeLoginRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves the authenticated Customer (that matches the given email/password pair) if they are part of a specific [Store](ctp:api:type:Store).
   *
   *	- If the Customer does not have a Cart, the most recently modified anonymous cart becomes the Customer's Cart.
   *	- If the Customer already has a Cart, the most recently modified anonymous cart is handled according to [AnonymousCartSignInMode](ctp:api:type:AnonymousCartSignInMode).
   *
   *	If a Cart is returned as part of [CustomerSignInResult](ctp:api:type:CustomerSignInResult), it has been [recalculated](ctp:api:type:MyCartRecalculateAction) with up-to-date prices, taxes, discounts, and invalid line items removed.
   *
   *	If an account with the given credentials is not found, an [InvalidCredentials](ctp:api:type:InvalidCredentialsError) error is returned.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/me/login",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyMeOrdersByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	If the Order exists in the Project but does not have the `store` field, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/me/orders/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyMeOrdersRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withId(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyMeOrdersByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/me/orders",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	The Cart must have a [shipping address set](ctp:api:type:CartSetShippingAddressAction) for taxes to be calculated. When creating [B2B Orders](/associates-overview#b2b-resources), the Customer must have the `CreateMyOrdersFromMyCarts` [Permission](ctp:api:type:Permission).
   *
   *	Creating an Order produces the [OrderCreated](ctp:api:type:OrderCreatedMessage) Message.
   *
   *	Specific Error Codes:
   *
   *	- [OutOfStock](ctp:api:type:OutOfStockError)
   *	- [PriceChanged](ctp:api:type:PriceChangedError)
   *	- [DiscountCodeNonApplicable](ctp:api:type:DiscountCodeNonApplicableError)
   *	- [CountryNotConfiguredInStore](ctp:api:type:CountryNotConfiguredInStoreError)
   *	- [AssociateMissingPermission](ctp:api:type:AssociateMissingPermissionError)
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/me/orders",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyMePasswordResetRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	This is the last step in the [password reset process of the authenticated Customer](/../api/projects/customers#password-reset-of-customer-in-store).
   *
   *	Resetting a password produces the of the Customer [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=true`.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/me/password/reset",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyMePasswordRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  reset() {
    return new ByProjectKeyInStoreKeyByStoreKeyMePasswordResetRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Changing the password of the Customer produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=false`.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/me/password",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different [Store](ctp:api:type:Store),
   *	the [ResourceNotFound](/errors#404-not-found-1) error is returned.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/me/shopping-lists/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different [Store](ctp:api:type:Store),
   *	the [ResourceNotFound](/errors#404-not-found-1) error is returned.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/me/shopping-lists/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  /**
   *	If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different [Store](ctp:api:type:Store),
   *	the [ResourceNotFound](/errors#404-not-found-1) error is returned.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/me/shopping-lists/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different [Store](ctp:api:type:Store), the [ResourceNotFound](/errors#404-not-found-1) error is returned.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/me/shopping-lists/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different [Store](ctp:api:type:Store),
   *	the [ResourceNotFound](/errors#404-not-found-1) error is returned.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/me/shopping-lists/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  /**
   *	If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different [Store](ctp:api:type:Store),
   *	the [ResourceNotFound](/errors#404-not-found-1) error is returned.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/me/shopping-lists/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/me/shopping-lists",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	When using this endpoint, the `store` field of a ShoppingList is always set to the [Store](ctp:api:type:Store) specified in the path parameter.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/me/shopping-lists",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyMeSignupRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	If omitted in the request body, the [Customer](ctp:api:type:Customer) `stores` field is set to the [Store](ctp:api:type:Store) specified in the path parameter.
   *
   *	Creating a Customer produces the [CustomerCreated](ctp:api:type:CustomerCreatedMessage) Message.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/me/signup",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyMeRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	A shopping cart holds product variants and can be ordered.
   */
  carts() {
    return new ByProjectKeyInStoreKeyByStoreKeyMeCartsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	An order can be created from a order, usually after a checkout process has been completed.
   */
  orders() {
    return new ByProjectKeyInStoreKeyByStoreKeyMeOrdersRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  activeCart() {
    return new ByProjectKeyInStoreKeyByStoreKeyMeActiveCartRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	shopping-lists e.g. for wishlist support
   *
   */
  shoppingLists() {
    return new ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  emailConfirm() {
    return new ByProjectKeyInStoreKeyByStoreKeyMeEmailConfirmRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  password() {
    return new ByProjectKeyInStoreKeyByStoreKeyMePasswordRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  signup() {
    return new ByProjectKeyInStoreKeyByStoreKeyMeSignupRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  login() {
    return new ByProjectKeyInStoreKeyByStoreKeyMeLoginRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/me",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/me",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/me",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyOrdersByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	If the Order exists in the Project but does not have the `store` field, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/orders/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	If the Order exists in the Project but does not have the `store` field, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/orders/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  /**
   *	If the Order exists in the Project but does not have the `store` field, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   *	Deleting an Order produces the [OrderDeleted](ctp:api:type:OrderDeletedMessage) Message.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/orders/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyOrdersOrderNumberByOrderNumberRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	If the Order exists in the Project but does not have the `store` field, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/orders/order-number={orderNumber}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	If the Order exists in the Project but does not have the `store` field, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/orders/order-number={orderNumber}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  /**
   *	If the Order exists in the Project but does not have the `store` field, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   *	Deleting an Order produces the [OrderDeleted](ctp:api:type:OrderDeletedMessage) Message.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/orders/order-number={orderNumber}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyOrdersRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withOrderNumber(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyOrdersOrderNumberByOrderNumberRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyOrdersByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/orders",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Before you create an Order, the Cart must have a [shipping address set](ctp:api:type:CartSetShippingAddressAction).
   *	The shipping address is used for tax calculation for a Cart with `Platform` [TaxMode](ctp:api:type:TaxMode).
   *
   *	Creating an Order produces the [OrderCreated](ctp:api:type:OrderCreatedMessage) Message.
   *
   *	Specific Error Codes:
   *
   *	- [OutOfStock](ctp:api:type:OutOfStockError)
   *	- [PriceChanged](ctp:api:type:PriceChangedError)
   *	- [DiscountCodeNonApplicable](ctp:api:type:DiscountCodeNonApplicableError)
   *	- [ShippingMethodDoesNotMatchCart](ctp:api:type:ShippingMethodDoesNotMatchCartError)
   *	- [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)
   *	- [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)
   *	- [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)
   *	- [CountryNotConfiguredInStore](ctp:api:type:CountryNotConfiguredInStoreError)
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/orders",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyProductProjectionsByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Gets the current or staged representation of a [Product](ctp:api:type:Product) by its ID from the specified [Store](ctp:api:type:Store).
   *	If the Store has defined some languages, countries, distribution or supply Channels,
   *	they are used for projections based on [locale](ctp:api:type:ProductProjectionLocales), [price](ctp:api:type:ProductProjectionPrices)
   *	and [inventory](ctp:api:type:ProductProjectionInventoryEntries).
   *
   *	When used with an API Client that has the `view_published_products:{projectKey}` scope, this endpoint only returns published (current) Product Projections.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/product-projections/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyProductProjectionsKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Gets the current or staged representation of a [Product](ctp:api:type:Product) by its key from the specified [Store](ctp:api:type:Store).
   *	If the Store has defined some languages, countries, distribution or supply Channels,
   *	they are used for projections based on [locale](ctp:api:type:ProductProjectionLocales), [price](ctp:api:type:ProductProjectionPrices)
   *	and [inventory](ctp:api:type:ProductProjectionInventoryEntries).
   *
   *	When used with an API Client that has the `view_published_products:{projectKey}` scope, this endpoint only returns published (current) Product Projections.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/product-projections/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyProductProjectionsRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyProductProjectionsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyProductProjectionsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
};
var ByProjectKeyInStoreKeyByStoreKeyProductSelectionAssignmentsRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Queries Product Selection assignments in a specific [Store](ctp:api:type:Store).
   *
   *	The response will include duplicate Products whenever more than one active Product Selection of the Store
   *	includes a Product. To make clear through which Product Selection a Product is available in the Store
   *	the response contains assignments including both the Product and the Product Selection.
   *	Only Products of Product Selections that are activated in the Store will be returned.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/product-selection-assignments",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyShippingMethodsMatchingCartRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves all the ShippingMethods that can ship to the shipping address of the given Cart in a given [Store](ctp:api:type:Store).
   *	Each ShippingMethod contains exactly one ShippingRate with the flag `isMatching` set to `true`.
   *	This ShippingRate is used when the ShippingMethod is [added to the Cart](ctp:api:type:CartSetShippingMethodAction).
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/shipping-methods/matching-cart",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyShippingMethodsRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Get ShippingMethods for a cart in a store
   */
  matchingCart() {
    return new ByProjectKeyInStoreKeyByStoreKeyShippingMethodsMatchingCartRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
};
var ByProjectKeyInStoreKeyByStoreKeyShoppingListsByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different [Store](ctp:api:type:Store),
   *	the [ResourceNotFound](/errors#404-not-found-1) error is returned.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/shopping-lists/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different [Store](ctp:api:type:Store),
   *	the [ResourceNotFound](/errors#404-not-found-1) error is returned.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/shopping-lists/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  /**
   *	If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different [Store](ctp:api:type:Store),
   *	the [ResourceNotFound](/errors#404-not-found-1) error is returned.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/shopping-lists/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyShoppingListsKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different [Store](ctp:api:type:Store),
   *	the [ResourceNotFound](/errors#404-not-found-1) error is returned.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/shopping-lists/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different [Store](ctp:api:type:Store),
   *	the [ResourceNotFound](/errors#404-not-found-1) error is returned.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/shopping-lists/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  /**
   *	If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different [Store](ctp:api:type:Store),
   *	the [ResourceNotFound](/errors#404-not-found-1) error is returned.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/shopping-lists/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyShoppingListsRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyShoppingListsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyShoppingListsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/shopping-lists",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	When using this endpoint, the `store` field of a ShoppingList is always set to the [Store](ctp:api:type:Store) specified in the path parameter.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/in-store/key={storeKey}/shopping-lists",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInStoreKeyByStoreKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	A shopping cart holds product variants and can be ordered.
   */
  carts() {
    return new ByProjectKeyInStoreKeyByStoreKeyCartsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	An order can be created from a cart, usually after a checkout process has been completed.
   */
  orders() {
    return new ByProjectKeyInStoreKeyByStoreKeyOrdersRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  me() {
    return new ByProjectKeyInStoreKeyByStoreKeyMeRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	A Customer is a person purchasing products. Carts, Orders,
   *	Comments and Reviews can be associated to a Customer.
   *
   */
  customers() {
    return new ByProjectKeyInStoreKeyByStoreKeyCustomersRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Retrieves the authenticated customer.
   */
  login() {
    return new ByProjectKeyInStoreKeyByStoreKeyLoginRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  shippingMethods() {
    return new ByProjectKeyInStoreKeyByStoreKeyShippingMethodsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	shopping-lists e.g. for wishlist support
   *
   */
  shoppingLists() {
    return new ByProjectKeyInStoreKeyByStoreKeyShoppingListsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  productProjections() {
    return new ByProjectKeyInStoreKeyByStoreKeyProductProjectionsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  productSelectionAssignments() {
    return new ByProjectKeyInStoreKeyByStoreKeyProductSelectionAssignmentsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  cartDiscounts() {
    return new ByProjectKeyInStoreKeyByStoreKeyCartDiscountsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
};
var ByProjectKeyInventoryByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/inventory/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/inventory/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  /**
   *	Produces the [InventoryEntryDeleted](ctp:api:type:InventoryEntryDeletedMessage) Message.
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/inventory/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInventoryKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/inventory/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/inventory/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  /**
   *	Produces the [InventoryEntryDeleted](ctp:api:type:InventoryEntryDeletedMessage) Message.
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/inventory/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyInventoryRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withId(childPathArgs) {
    return new ByProjectKeyInventoryByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withKey(childPathArgs) {
    return new ByProjectKeyInventoryKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/inventory",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Produces the [InventoryEntryCreated](ctp:api:type:InventoryEntryCreatedMessage) Message.
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/inventory",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyLoginRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Authenticates a global Customer not associated with a Store.
   *	For more information, see [Global versus Store-specific Customers](/../api/customers-overview#global-versus-store-specific-customers).
   *	If the Customer is registered in a Store, use the [Authenticate (sign in) Customer in Store](/../api/projects/customers#authenticate-sign-in-customer-in-store) method.
   *
   *	If an account with the given credentials is not found, an [InvalidCredentials](ctp:api:type:InvalidCredentialsError) error is returned.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/login",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyMeActiveCartRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves the Customer's most recently modified active Cart.
   *	Carts with `Merchant` or `Quote` [CartOrigin](ctp:api:type:CartOrigin) are ignored.
   *
   *	If no active Cart exists, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/me/active-cart",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyMeBusinessUnitsByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/me/business-units/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/me/business-units/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/me/business-units/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyMeBusinessUnitsKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/me/business-units/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/me/business-units/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/me/business-units/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyMeBusinessUnitsRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withId(childPathArgs) {
    return new ByProjectKeyMeBusinessUnitsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withKey(childPathArgs) {
    return new ByProjectKeyMeBusinessUnitsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/me/business-units",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Automatically assigns the Associate to the Business Unit in the default [Associate Role](ctp:api:type:AssociateRole) defined in [BusinessUnitConfiguration](ctp:api:type:BusinessUnitConfiguration). If there is no default Associate Role configured, this request fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error. When creating a Division, the Associate must have the `AddChildUnits` [Permission](ctp:api:type:Permission) in the parent unit. If the required [Permission](/projects/associate-roles#permission) is missing, an [AssociateMissingPermission](/errors#associatemissingpermission) error is returned.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/me/business-units",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyMeCartsReplicateRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Creates a new Cart by replicating an existing Cart or Order of the authenticated Customer.
   *	This can be useful in cases where a customer wants to cancel a recent order to make some changes or reorder a previous order.
   *
   *	The replicated Cart preserves Customer information, Line Items and Custom Line Items, Custom Fields, Discount Codes, and other settings of the Cart or Order.
   *	If the Line Items become invalid, for example, due to removed Products or Prices, they are removed from the new Cart.
   *	If the Customer switches to another Customer Group, the new Cart is updated with the new value.
   *	It has up-to-date Tax Rates, Prices, and Line Item product data and is in `Active` [CartState](ctp:api:type:CartState).
   *
   *	The new Cart does not contain Payments or Deliveries. The [State](ctp:api:type:ItemState) of Line Items and Custom Line Items is reset to `initial`.
   *
   *	In case the Cart or Order to be replicated does not belong to the authenticaed Customer, the API returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/me/carts/replicate",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyMeCartsByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/me/carts/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/me/carts/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/me/carts/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyMeCartsKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/me/carts/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/me/carts/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/me/carts/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyMeCartsRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyMeCartsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyMeCartsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  replicate() {
    return new ByProjectKeyMeCartsReplicateRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/me/carts",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/me/carts",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyMeEmailConfirmRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	This is the last step in the [email verification process of a Customer](/../api/projects/customers#email-verification-of-customer).
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/me/email/confirm",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyMeLoginRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves the authenticated customer (that matches the given email/password pair).
   *
   *	If used with [an access token for an anonymous session](ctp:api:type:AnonymousSession), all Orders and Carts that belong to the `anonymousId` are assigned to the newly logged-in Customer.
   *
   *	- If the Customer does not have a Cart yet, the most recently modified anonymous cart becomes the Customer's Cart.
   *	- If the Customer already has a Cart, the most recently modified anonymous cart is handled in accordance with [AnonymousCartSignInMode](ctp:api:type:AnonymousCartSignInMode).
   *
   *	A Cart returned as part of the [CustomerSignInResult](ctp:api:type:CustomerSignInResult) is [recalculated](ctp:api:type:MyCartRecalculateAction) with up-to-date prices, taxes, discounts, and invalid line items removed.
   *
   *	If an account with the given credentials is not found, an [InvalidCredentials](ctp:api:type:InvalidCredentialsError) error is returned.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/me/login",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyMeOrdersQuotesRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	When creating [B2B Orders](/associates-overview#b2b-resources), the Customer must have the `CreateMyOrdersFromMyQuotes` [Permission](ctp:api:type:Permission).
   *
   *	Creating an Order produces the [OrderCreated](ctp:api:type:OrderCreatedMessage) Message.
   *
   *	Specific Error Codes:
   *
   *	- [OutOfStock](ctp:api:type:OutOfStockError)
   *	- [PriceChanged](ctp:api:type:PriceChangedError)
   *	- [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)
   *	- [CountryNotConfiguredInStore](ctp:api:type:CountryNotConfiguredInStoreError)
   *	- [AssociateMissingPermission](ctp:api:type:AssociateMissingPermissionError)
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/me/orders/quotes",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyMeOrdersByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/me/orders/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyMeOrdersRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withId(childPathArgs) {
    return new ByProjectKeyMeOrdersByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  orderQuote() {
    return new ByProjectKeyMeOrdersQuotesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/me/orders",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	The Cart must have a [shipping address set](ctp:api:type:CartSetShippingAddressAction) for taxes to be calculated. When creating [B2B Orders](/associates-overview#b2b-resources), the Customer must have the `CreateMyOrdersFromMyCarts` [Permission](ctp:api:type:Permission).
   *
   *	Creating an Order produces the [OrderCreated](ctp:api:type:OrderCreatedMessage) Message.
   *
   *	Specific Error Codes:
   *
   *	- [OutOfStock](ctp:api:type:OutOfStockError)
   *	- [PriceChanged](ctp:api:type:PriceChangedError)
   *	- [DiscountCodeNonApplicable](ctp:api:type:DiscountCodeNonApplicableError)
   *	- [AssociateMissingPermission](ctp:api:type:AssociateMissingPermissionError)
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/me/orders",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyMePasswordResetRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	This is the last step in the [password reset process of a Customer](/../api/projects/customers#password-reset-of-customer).
   *
   *	Resetting a password of the Customer produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=true`.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/me/password/reset",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyMePasswordRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  reset() {
    return new ByProjectKeyMePasswordResetRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Changing the password of the Customer produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=false`.
   *
   *	If the current password does not match, an [InvalidCurrentPassword](ctp:api:type:InvalidCurrentPasswordError) error is returned.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/me/password",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyMePaymentsByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/me/payments/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	This endpoint can only update a Payment when it has no [Transactions](ctp:api:type:Transaction).
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/me/payments/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  /**
   *	This endpoint can only delete a Payment when it has no [Transactions](ctp:api:type:Transaction).
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/me/payments/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyMePaymentsKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/me/payments/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	This endpoint can only update a Payment when it has no [Transactions](ctp:api:type:Transaction).
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/me/payments/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  /**
   *	This endpoint can only delete a Payment when it has no [Transactions](ctp:api:type:Transaction).
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/me/payments/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyMePaymentsRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyMePaymentsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyMePaymentsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/me/payments",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creating a Payment produces the [PaymentCreated](ctp:api:type:PaymentCreatedMessage) Message.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/me/payments",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyMeQuoteRequestsByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/me/quote-requests/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/me/quote-requests/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/me/quote-requests/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyMeQuoteRequestsKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/me/quote-requests/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/me/quote-requests/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/me/quote-requests/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyMeQuoteRequestsRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withId(childPathArgs) {
    return new ByProjectKeyMeQuoteRequestsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withKey(childPathArgs) {
    return new ByProjectKeyMeQuoteRequestsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/me/quote-requests",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/me/quote-requests",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyMeQuotesByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/me/quotes/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/me/quotes/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyMeQuotesKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/me/quotes/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/me/quotes/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyMeQuotesRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withId(childPathArgs) {
    return new ByProjectKeyMeQuotesByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withKey(childPathArgs) {
    return new ByProjectKeyMeQuotesKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/me/quotes",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyMeShoppingListsByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/me/shopping-lists/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/me/shopping-lists/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/me/shopping-lists/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyMeShoppingListsKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/me/shopping-lists/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/me/shopping-lists/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/me/shopping-lists/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyMeShoppingListsRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withId(childPathArgs) {
    return new ByProjectKeyMeShoppingListsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withKey(childPathArgs) {
    return new ByProjectKeyMeShoppingListsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/me/shopping-lists",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/me/shopping-lists",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyMeSignupRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	If used with an [access token for an anonymous session](ctp:api:type:AnonymousSession), all Orders and Carts that belong to the `anonymousId` are assigned to the newly created Customer.
   *
   *	Creating a Customer produces the [CustomerCreated](ctp:api:type:CustomerCreatedMessage) Message.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/me/signup",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyMeRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  emailConfirm() {
    return new ByProjectKeyMeEmailConfirmRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  password() {
    return new ByProjectKeyMePasswordRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  signup() {
    return new ByProjectKeyMeSignupRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  login() {
    return new ByProjectKeyMeLoginRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  activeCart() {
    return new ByProjectKeyMeActiveCartRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	MyBusinessUnit creates and provides access to Business Units scoped to a specific user.
   */
  businessUnits() {
    return new ByProjectKeyMeBusinessUnitsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	A shopping cart holds product variants and can be ordered.
   */
  carts() {
    return new ByProjectKeyMeCartsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	An order can be created from a cart, usually after a checkout process has been completed.
   */
  orders() {
    return new ByProjectKeyMeOrdersRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	The My Payments endpoint creates and provides access to payments scoped to a specific user.
   */
  payments() {
    return new ByProjectKeyMePaymentsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	The My Quote Requests endpoint creates and provides access to Quote Requests scoped to a specific user.
   */
  quoteRequests() {
    return new ByProjectKeyMeQuoteRequestsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	The My Quote endpoint provides access to Quotes scoped to a specific user.
   */
  quotes() {
    return new ByProjectKeyMeQuotesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	The My Shopping Lists endpoint creates and provides access to Shopping Lists scoped to a specific user.
   */
  shoppingLists() {
    return new ByProjectKeyMeShoppingListsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/me",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/me",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/me",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyMessagesByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Deprecated scope: `view_orders:{projectKey}`
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/messages/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyMessagesRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withId(childPathArgs) {
    return new ByProjectKeyMessagesByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Deprecated scope: `view_orders:{projectKey}`
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/messages",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyOrdersEditsByIDApplyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Applying an OrderEdit produces the [OrderEditApplied](ctp:api:type:OrderEditAppliedMessage) Message.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/orders/edits/{ID}/apply",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyOrdersEditsByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  apply() {
    return new ByProjectKeyOrdersEditsByIDApplyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/orders/edits/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/orders/edits/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/orders/edits/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyOrdersEditsKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/orders/edits/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/orders/edits/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/orders/edits/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyOrdersEditsRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyOrdersEditsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyOrdersEditsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/orders/edits",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	You can either create multiple Order Edits for an Order and apply them sequentially to an Order, or create multiple Order Edits parallelly (as alternatives to each other) and apply one of them to the Order.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/orders/edits",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyOrdersImportRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Importing an Order produces the [Order Imported](ctp:api:type:OrderImportedMessage) Message.
   *
   *	Specific Error Codes:
   *
   *	- [OutOfStock](ctp:api:type:OutOfStockError)
   *	- [CountryNotConfiguredInStore](ctp:api:type:CountryNotConfiguredInStoreError)
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/orders/import",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyOrdersQuotesRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Creating an Order produces the [OrderCreated](ctp:api:type:OrderCreatedMessage) Message.
   *
   *	Specific Error Codes:
   *
   *	- [OutOfStock](ctp:api:type:OutOfStockError)
   *	- [PriceChanged](ctp:api:type:PriceChangedError)
   *	- [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)
   *	- [InvalidOperation](ctp:api:type:InvalidOperationError)
   *	- [CountryNotConfiguredInStore](ctp:api:type:CountryNotConfiguredInStoreError)
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/orders/quotes",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyOrdersSearchRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/orders/search",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  /**
   *	Checks whether a search index for the Project's Orders exists.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "HEAD",
      uriTemplate: "/{projectKey}/orders/search",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      }
    }, this.args.executeRequest);
  }
};
var ByProjectKeyOrdersByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/orders/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/orders/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  /**
   *	Deleting an Order produces the [OrderDeleted](ctp:api:type:OrderDeletedMessage) Message.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/orders/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyOrdersOrderNumberByOrderNumberRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/orders/order-number={orderNumber}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/orders/order-number={orderNumber}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  /**
   *	Deleting an Order produces the [OrderDeleted](ctp:api:type:OrderDeletedMessage) Message.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/orders/order-number={orderNumber}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyOrdersRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  importOrder() {
    return new ByProjectKeyOrdersImportRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  orderQuote() {
    return new ByProjectKeyOrdersQuotesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withOrderNumber(childPathArgs) {
    return new ByProjectKeyOrdersOrderNumberByOrderNumberRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	OrderEdit are containers for financial changes after an Order has been placed.
   */
  edits() {
    return new ByProjectKeyOrdersEditsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyOrdersByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	This endpoint provides high performance search queries over Orders. The order search allows searching through all orders (currently supporting a limit of the 10.000.000 newest orders) in your project.
   *
   */
  search() {
    return new ByProjectKeyOrdersSearchRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/orders",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Before you create an Order, the Cart must have a [shipping address set](ctp:api:type:CartSetShippingAddressAction).
   *	The shipping address is used for tax calculation for a Cart with `Platform` [TaxMode](ctp:api:type:TaxMode).
   *
   *	Creating an Order produces the [OrderCreated](ctp:api:type:OrderCreatedMessage) Message.
   *
   *	Specific Error Codes:
   *
   *	- [OutOfStock](ctp:api:type:OutOfStockError)
   *	- [PriceChanged](ctp:api:type:PriceChangedError)
   *	- [DiscountCodeNonApplicable](ctp:api:type:DiscountCodeNonApplicableError)
   *	- [ShippingMethodDoesNotMatchCart](ctp:api:type:ShippingMethodDoesNotMatchCartError)
   *	- [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)
   *	- [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)
   *	- [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/orders",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyPaymentsByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/payments/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/payments/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/payments/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyPaymentsKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/payments/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/payments/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/payments/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyPaymentsRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyPaymentsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyPaymentsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/payments",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creating a Payment produces the [PaymentCreated](ctp:api:type:PaymentCreatedMessage) Message.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/payments",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyProductDiscountsMatchingRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	This endpoint can be used to simulate which Product Discounts would be applied if a specified Product Variant had a specified Price.
   *	Given Product and Product Variant IDs and a Price, this endpoint will return the [ProductDiscount](ctp:api:type:ProductDiscount) that would have been applied to that Price.
   *
   *	If a Product Discount could not be found that could be applied to the Price of a Product Variant, a [NoMatchingProductDiscountFound](ctp:api:type:NoMatchingProductDiscountFoundError) error is returned.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/product-discounts/matching",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyProductDiscountsByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/product-discounts/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/product-discounts/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/product-discounts/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyProductDiscountsKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/product-discounts/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/product-discounts/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/product-discounts/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyProductDiscountsRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  matching() {
    return new ByProjectKeyProductDiscountsMatchingRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withKey(childPathArgs) {
    return new ByProjectKeyProductDiscountsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyProductDiscountsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/product-discounts",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/product-discounts",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyProductProjectionsSearchRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Product Projection Search
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/product-projections/search",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  /**
   *	Product Projection Search
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/product-projections/search",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyProductProjectionsSuggestRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/product-projections/suggest",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyProductProjectionsByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Gets the current or staged representation of a [Product](ctp:api:type:Product) by its ID. When used with an API Client that has the `view_published_products:{projectKey}` scope, this endpoint only returns published (current) Product Projections.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/product-projections/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyProductProjectionsKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Gets the current or staged representation of a [Product](ctp:api:type:Product) found by Key.
   *	When used with an API Client that has the `view_published_products:{projectKey}` scope,
   *	this endpoint only returns published (current) Product Projections.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/product-projections/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyProductProjectionsRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	This endpoint provides high performance search queries over ProductProjections. The query result contains the
   *	ProductProjections for which at least one ProductVariant matches the search query. This means that variants can
   *	be included in the result also for which the search query does not match. To determine which ProductVariants match
   *	the search query, the returned ProductProjections include the additional field isMatchingVariant.
   *
   */
  search() {
    return new ByProjectKeyProductProjectionsSearchRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	The source of data for suggestions is the searchKeyword field in a product
   */
  suggest() {
    return new ByProjectKeyProductProjectionsSuggestRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withKey(childPathArgs) {
    return new ByProjectKeyProductProjectionsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyProductProjectionsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Use the Product Projections query endpoint to get the current or staged representations of Products.
   *	When used with an API Client that has the `view_published_products:{projectKey}` scope,
   *	this endpoint only returns published (current) Product Projections.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/product-projections",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyProductSelectionsByIDProductsRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/product-selections/{ID}/products",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyProductSelectionsByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  products() {
    return new ByProjectKeyProductSelectionsByIDProductsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/product-selections/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/product-selections/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletion will only succeed if the Product Selection is not assigned to any [Store](/../api/projects/stores#store).
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/product-selections/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyProductSelectionsKeyByKeyProductsRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/product-selections/key={key}/products",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyProductSelectionsKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  products() {
    return new ByProjectKeyProductSelectionsKeyByKeyProductsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/product-selections/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/product-selections/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletion will only succeed if the Product Selection is not assigned to any [Store](/../api/projects/stores#store).
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/product-selections/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyProductSelectionsRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyProductSelectionsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyProductSelectionsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/product-selections",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/product-selections",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyProductTypesByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/product-types/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Product Type with given `id` exists. Responds with a `200 OK` status if the `Product Type` exists or `404 Not Found` otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "HEAD",
      uriTemplate: "/{projectKey}/product-types/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/product-types/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/product-types/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyProductTypesKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/product-types/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Product Type with given `key` exists. Responds with a `200 OK` status if the `Product Type` exists or `404 Not Found` otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "HEAD",
      uriTemplate: "/{projectKey}/product-types/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/product-types/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/product-types/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyProductTypesRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyProductTypesKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyProductTypesByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/product-types",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Check if Product Types exist. Responds with a `200 OK` status if any Product Types match the Query Predicate, or `404 Not Found` otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "HEAD",
      uriTemplate: "/{projectKey}/product-types",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/product-types",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyProductsByIDImagesRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Upload a JPEG, PNG and GIF file to a [ProductVariant](ctp:api:type:ProductVariant). The maximum file size of the image is 10MB. `variant` or `sku` is required to update a specific ProductVariant. The image is uploaded to the Master Variant if `variant` or `sku` are not included. Produces the [ProductImageAdded](/projects/messages#product-image-added) Message when the `Small` version of the image has been uploaded to the CDN.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/products/{ID}/images",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyProductsByIDProductSelectionsRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/products/{ID}/product-selections",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyProductsByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  images() {
    return new ByProjectKeyProductsByIDImagesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  productSelections() {
    return new ByProjectKeyProductsByIDProductSelectionsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	If [Price selection](ctp:api:type:ProductPriceSelection) query parameters are provided, the selected Prices are added to the response.
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/products/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Check if a Product exists with a specified `id`. Responds with a `200 OK` status if the Product exists or `404 Not Found` otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "HEAD",
      uriTemplate: "/{projectKey}/products/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	If [Price selection](ctp:api:type:ProductPriceSelection) query parameters are provided, the selected Prices are added to the response.
   *
   *	A failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error.
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/products/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  /**
   *	If [Price selection](ctp:api:type:ProductPriceSelection) query parameters are provided, the selected Prices are added to the response.
   *	Produces the [ProductDeleted](/projects/messages#product-deleted) Message.
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/products/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyProductsKeyByKeyProductSelectionsRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/products/key={key}/product-selections",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyProductsKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  productSelections() {
    return new ByProjectKeyProductsKeyByKeyProductSelectionsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	If [Price selection](ctp:api:type:ProductPriceSelection) query parameters are provided, the selected Prices are added to the response.
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/products/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Check if a Product exists with a specified `key`. Responds with a `200 OK` status if the Product exists or `404 Not Found` otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "HEAD",
      uriTemplate: "/{projectKey}/products/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	A failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error.
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/products/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  /**
   *	If [Price selection](ctp:api:type:ProductPriceSelection) query parameters are provided, the selected Prices are added to the response.
   *	Produces the [ProductDeleted](/projects/messages#product-deleted) Message.
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/products/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyProductsRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyProductsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyProductsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	If [Price selection](ctp:api:type:ProductPriceSelection) query parameters are provided, the selected Prices are added to the response.
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/products",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Check if Products exist. Responds with a `200 OK` status if any Products match the Query Predicate, or `404 Not Found` otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "HEAD",
      uriTemplate: "/{projectKey}/products",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	To create a new Product, send a representation that is going to become the initial _staged_ representation of the new Product in the master catalog.
   *	If [Price Selection](ctp:api:type:ProductPriceSelection) query parameters are provided, selected Prices will be added to the response.
   *	Produces the [ProductCreated](/projects/messages#product-created) Message.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/products",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyQuoteRequestsByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/quote-requests/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/quote-requests/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/quote-requests/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyQuoteRequestsKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/quote-requests/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/quote-requests/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/quote-requests/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyQuoteRequestsRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyQuoteRequestsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyQuoteRequestsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/quote-requests",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/quote-requests",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyQuotesByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/quotes/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/quotes/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/quotes/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyQuotesKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/quotes/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/quotes/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/quotes/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyQuotesRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyQuotesKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyQuotesByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/quotes",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/quotes",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyReviewsByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/reviews/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/reviews/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/reviews/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyReviewsKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/reviews/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/reviews/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/reviews/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyReviewsRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyReviewsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyReviewsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/reviews",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/reviews",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyShippingMethodsMatchingCartLocationRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves all the ShippingMethods that can ship to the given [Location](/projects/zones#location)
   *	with a `predicate` that matches the given Cart.
   *	Each ShippingMethod contains exactly one ShippingRate with the flag `isMatching` set to `true`.
   *	This ShippingRate is used when the ShippingMethod is [added to the Cart](ctp:api:type:CartSetShippingMethodAction).
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/shipping-methods/matching-cart-location",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyShippingMethodsMatchingCartRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves all the ShippingMethods that can ship to the shipping address of the given Cart.
   *	Each ShippingMethod contains exactly one ShippingRate with the flag `isMatching` set to `true`.
   *	This ShippingRate is used when the ShippingMethod is [added to the Cart](ctp:api:type:CartSetShippingMethodAction).
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/shipping-methods/matching-cart",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyShippingMethodsMatchingLocationRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves all the ShippingMethods that can ship to the given [Location](/projects/zones#location).
   *	ShippingMethods that have a `predicate` defined are automatically disqualified.
   *	If the `currency` parameter is given, then the ShippingMethods must also have a rate defined in the specified currency.
   *	Each ShippingMethod contains at least one ShippingRate with the flag `isMatching` set to `true`.
   *	If the `currency` parameter is given, exactly one ShippingRate will contain it.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/shipping-methods/matching-location",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyShippingMethodsMatchingOrdereditRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves all the ShippingMethods that can ship to the given [Location](/../api/projects/zones#location) for an [OrderEdit](/../api/projects/order-edits).
   *
   *	If the OrderEdit preview cannot be generated, an [EditPreviewFailed](ctp:api:type:EditPreviewFailedError) error is returned.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/shipping-methods/matching-orderedit",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyShippingMethodsByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/shipping-methods/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/shipping-methods/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/shipping-methods/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyShippingMethodsKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/shipping-methods/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/shipping-methods/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/shipping-methods/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyShippingMethodsRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyShippingMethodsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Get ShippingMethods for a cart
   */
  matchingCart() {
    return new ByProjectKeyShippingMethodsMatchingCartRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Get ShippingMethods for a cart and location
   */
  matchingCartLocation() {
    return new ByProjectKeyShippingMethodsMatchingCartLocationRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Get ShippingMethods for an order edit
   */
  matchingOrderedit() {
    return new ByProjectKeyShippingMethodsMatchingOrdereditRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Get ShippingMethods for a location
   */
  matchingLocation() {
    return new ByProjectKeyShippingMethodsMatchingLocationRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyShippingMethodsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/shipping-methods",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/shipping-methods",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyShoppingListsByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/shopping-lists/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/shopping-lists/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/shopping-lists/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyShoppingListsKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/shopping-lists/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/shopping-lists/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/shopping-lists/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyShoppingListsRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyShoppingListsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyShoppingListsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/shopping-lists",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/shopping-lists",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyStagedQuotesByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/staged-quotes/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/staged-quotes/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/staged-quotes/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyStagedQuotesKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/staged-quotes/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/staged-quotes/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/staged-quotes/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyStagedQuotesRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyStagedQuotesKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyStagedQuotesByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/staged-quotes",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/staged-quotes",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyStandalonePricesByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/standalone-prices/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/standalone-prices/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  /**
   *	Produces the [StandalonePriceDeleted](ctp:api:type:StandalonePriceDeletedMessage) Message.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/standalone-prices/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyStandalonePricesKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/standalone-prices/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/standalone-prices/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  /**
   *	Produces the [StandalonePriceDeleted](ctp:api:type:StandalonePriceDeletedMessage) Message.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/standalone-prices/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyStandalonePricesRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyStandalonePricesKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyStandalonePricesByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/standalone-prices",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Produces the [StandalonePriceCreated](ctp:api:type:StandalonePriceCreatedMessage) Message.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/standalone-prices",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyStatesByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/states/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/states/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/states/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyStatesKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/states/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/states/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/states/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyStatesRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyStatesKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyStatesByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/states",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/states",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyStoresByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/stores/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/stores/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/stores/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyStoresKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/stores/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/stores/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/stores/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyStoresRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyStoresKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyStoresByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/stores",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/stores",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeySubscriptionsByIDHealthRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  /**
   *	This endpoint can be polled by a monitoring or alerting system that checks the health of your Subscriptions. To ease integration with such systems this endpoint does not require [Authorization](/../api/authorization).
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/subscriptions/{ID}/health",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      }
    }, this.args.executeRequest);
  }
};
var ByProjectKeySubscriptionsByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withIdHealth() {
    return new ByProjectKeySubscriptionsByIDHealthRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/subscriptions/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/subscriptions/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/subscriptions/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeySubscriptionsKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/subscriptions/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/subscriptions/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/subscriptions/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeySubscriptionsRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeySubscriptionsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeySubscriptionsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/subscriptions",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	A test message is sent to ensure the correct configuration of the Destination. If the message cannot be delivered, the Subscription will not be created. The payload of the test message is a notification of type [ResourceCreated](/../api/projects/subscriptions#resourcecreateddeliverypayload) for the `resourceTypeId` `subscription`.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/subscriptions",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyTaxCategoriesByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/tax-categories/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/tax-categories/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/tax-categories/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyTaxCategoriesKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/tax-categories/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/tax-categories/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/tax-categories/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyTaxCategoriesRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyTaxCategoriesKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyTaxCategoriesByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/tax-categories",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/tax-categories",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyTypesByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/types/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/types/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/types/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyTypesKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/types/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/types/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/types/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyTypesRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyTypesKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyTypesByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/types",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/types",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyZonesByIDRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/zones/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/zones/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/zones/{ID}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyZonesKeyByKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/zones/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/zones/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "DELETE",
      uriTemplate: "/{projectKey}/zones/key={key}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
};
var ByProjectKeyZonesRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyZonesKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyZonesByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}/zones",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}/zones",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ByProjectKeyRequestBuilder = class {
  constructor(args) {
    this.args = args;
  }
  asAssociate() {
    return new ByProjectKeyAsAssociateRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	An Associate Role enables permissions over a Business Unit to an Associate.
   */
  associateRoles() {
    return new ByProjectKeyAssociateRolesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	A Business Unit can represent a Company or a Division.
   */
  businessUnits() {
    return new ByProjectKeyBusinessUnitsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Categories are used to organize products in a hierarchical structure.
   */
  categories() {
    return new ByProjectKeyCategoriesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	A shopping cart holds product variants and can be ordered.
   */
  carts() {
    return new ByProjectKeyCartsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Cart discounts are used to change the prices of different elements within a cart.
   */
  cartDiscounts() {
    return new ByProjectKeyCartDiscountsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Channels represent a source or destination of different entities. They can be used to model warehouses or stores.
   *
   */
  channels() {
    return new ByProjectKeyChannelsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	A Customer is a person purchasing products. Carts, Orders, Quotes, Reviews and Payments can be associated to a Customer.
   *
   */
  customers() {
    return new ByProjectKeyCustomersRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	customer-groups are used to evaluate products and channels.
   */
  customerGroups() {
    return new ByProjectKeyCustomerGroupsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Store custom JSON values.
   */
  customObjects() {
    return new ByProjectKeyCustomObjectsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Discount Codes can be added to a discount-code to enable certain discount-code discounts.
   */
  discountCodes() {
    return new ByProjectKeyDiscountCodesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	commercetools Composable Commerce provides a GraphQL API
   */
  graphql() {
    return new ByProjectKeyGraphqlRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Inventory allows you to track stock quantities.
   */
  inventory() {
    return new ByProjectKeyInventoryRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Retrieves the authenticated customer.
   */
  login() {
    return new ByProjectKeyLoginRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	A message represents a change or an action performed on a resource (like an Order or a Product).
   */
  messages() {
    return new ByProjectKeyMessagesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	An order can be created from a order, usually after a checkout process has been completed.
   */
  orders() {
    return new ByProjectKeyOrdersRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Payments hold information about the current state of receiving and/or refunding money
   */
  payments() {
    return new ByProjectKeyPaymentsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Products themselves are not sellable. Instead, they act as a parent structure for sellable Product Variants.
   *
   */
  products() {
    return new ByProjectKeyProductsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Product discounts are used to change certain product prices.
   */
  productDiscounts() {
    return new ByProjectKeyProductDiscountsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	A projected representation of a product shows the product with its current or staged data. The current or staged
   *	representation of a product in a catalog is called a product projection.
   *
   */
  productProjections() {
    return new ByProjectKeyProductProjectionsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Manage individual Store assortments through Product Selections.
   *
   *	After you have created Product Selections and populated them with Products,
   *	you can manage Store assortments by assigning Product Selections to Stores.
   *	Product Selections may be used by a single Store or shared across several Stores.
   *
   *	As a good practice, we recommend first creating Products in the project, and then creating Product Selection.
   *
   */
  productSelections() {
    return new ByProjectKeyProductSelectionsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Product Types are used to describe common characteristics, most importantly common custom attributes,
   *	of many concrete products.
   *
   */
  productTypes() {
    return new ByProjectKeyProductTypesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	A quote holds the negotiated offer.
   */
  quotes() {
    return new ByProjectKeyQuotesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	A request for a Quote holds product variants and can be ordered.
   */
  quoteRequests() {
    return new ByProjectKeyQuoteRequestsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	A staged quote holds the negotiation between the [Buyer](/../api/quotes-overview#buyer) and the [Seller](/../api/quotes-overview#seller).
   */
  stagedQuotes() {
    return new ByProjectKeyStagedQuotesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Reviews are used to evaluate products and channels.
   */
  reviews() {
    return new ByProjectKeyReviewsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	ShippingMethods define where orders can be shipped and what the costs are.
   */
  shippingMethods() {
    return new ByProjectKeyShippingMethodsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	shopping-lists e.g. for wishlist support
   */
  shoppingLists() {
    return new ByProjectKeyShoppingListsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	commercetools Composable Commerce allows you to model states of certain objects, such as orders, line items, products,
   *	reviews, and payments in order to define finite state machines reflecting the business logic you'd like to
   *	implement.
   *
   */
  states() {
    return new ByProjectKeyStatesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Subscriptions allow you to be notified of new messages or changes via a Message Queue of your choice
   */
  subscriptions() {
    return new ByProjectKeySubscriptionsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Tax Categories define how products are to be taxed in different countries.
   */
  taxCategories() {
    return new ByProjectKeyTaxCategoriesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Types define custom fields that are used to enhance resources as you need.
   */
  types() {
    return new ByProjectKeyTypesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Zones allow defining ShippingRates for specific Locations.
   */
  zones() {
    return new ByProjectKeyZonesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  me() {
    return new ByProjectKeyMeRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Extend the behavior of an API with your business logic
   */
  extensions() {
    return new ByProjectKeyExtensionsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Manage your API Clients via an API. Useful for Infrastructure-as-Code tooling, and regularly rotating API secrets.
   *
   */
  apiClients() {
    return new ByProjectKeyApiClientsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Stores let you model the context your customers shop in.
   */
  stores() {
    return new ByProjectKeyStoresRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  inStoreKeyWithStoreKeyValue(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	A standalone price assigns a price to a product variant for a given scope. The API will use the standalone prices associated with a Product if its field [`priceMode`](/projects/products#pricemode) is set to `Standalone` [ProductPriceMode](ctp:api:type:ProductPriceModeEnum).
   */
  standalonePrices() {
    return new ByProjectKeyStandalonePricesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  inBusinessUnitKeyWithBusinessUnitKeyValue(childPathArgs) {
    return new ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Attribute groups ... TODO
   */
  attributeGroups() {
    return new ByProjectKeyAttributeGroupsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "GET",
      uriTemplate: "/{projectKey}",
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: "POST",
      uriTemplate: "/{projectKey}",
      pathVariables: this.args.pathArgs,
      headers: {
        "Content-Type": "application/json",
        ...methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers
      },
      body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
    }, this.args.executeRequest);
  }
};
var ApiRoot = class {
  constructor(args) {
    _defineProperty(this, "executeRequest", void 0);
    _defineProperty(this, "baseUri", void 0);
    this.executeRequest = args.executeRequest;
    this.baseUri = args.baseUri || "https://api.europe-west1.gcp.commercetools.com";
  }
  /**
   *	The Project endpoint is used to retrieve certain information from a project.
   */
  withProjectKey(childPathArgs) {
    return new ByProjectKeyRequestBuilder({
      pathArgs: {
        ...childPathArgs
      },
      executeRequest: this.executeRequest,
      baseUri: this.baseUri
    });
  }
};
var createExecutorFromMiddlewares = (executor, midds) => {
  if (!midds || midds.length == 0) {
    return executor;
  }
  const reduced = midds.reduce(reduceMiddleware);
  return middlewareToExecutor(reduced, executor);
};
function reduceMiddleware(middleware1, middleware2) {
  return (request, executor) => middleware1(request, middlewareToExecutor(middleware2, executor));
}
function middlewareToExecutor(middleware, executor) {
  return (request) => middleware(request, executor);
}
function createApiBuilderFromCtpClient(ctpClient, baseUri) {
  return new ApiRoot({
    executeRequest: ctpClient.execute,
    baseUri
  });
}
export {
  ApiRoot,
  createApiBuilderFromCtpClient,
  createExecutorFromMiddlewares
};
//# sourceMappingURL=@commercetools_platform-sdk.js.map
